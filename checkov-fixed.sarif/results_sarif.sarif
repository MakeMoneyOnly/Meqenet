{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/main/sarif-2.1/schema/sarif-schema-2.1.0.json", "version": "2.1.0", "runs": [{"tool": {"driver": {"name": "Checkov", "version": "3.2.469", "informationUri": "https://checkov.io", "rules": [{"id": "CKV_AWS_272", "name": "Ensure AWS Lambda function is configured to validate code-signing", "shortDescription": {"text": "Ensure AWS Lambda function is configured to validate code-signing"}, "fullDescription": {"text": "Ensure AWS Lambda function is configured to validate code-signing"}, "help": {"text": "Ensure AWS Lambda function is configured to validate code-signing\nResource: aws_lambda_function.key_rotation"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-272"}, {"id": "CKV_AWS_23", "name": "Ensure every security group and rule has a description", "shortDescription": {"text": "Ensure every security group and rule has a description"}, "fullDescription": {"text": "Ensure every security group and rule has a description"}, "help": {"text": "Ensure every security group and rule has a description\nResource: aws_security_group.lambda"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/networking-31"}, {"id": "CKV_AWS_382", "name": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1", "shortDescription": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1"}, "fullDescription": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1"}, "help": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1\nResource: aws_security_group.lambda"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/bc-aws-382"}, {"id": "CKV_AWS_131", "name": "Ensure that ALB drops HTTP headers", "shortDescription": {"text": "Ensure that ALB drops HTTP headers"}, "fullDescription": {"text": "Ensure that ALB drops HTTP headers"}, "help": {"text": "Ensure that ALB drops HTTP headers\nResource: module.alb.aws_lb.habesha_store"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/ensure-that-alb-drops-http-headers"}, {"id": "CKV_AWS_91", "name": "Ensure the ELBv2 (Application/Network) has access logging enabled", "shortDescription": {"text": "Ensure the ELBv2 (Application/Network) has access logging enabled"}, "fullDescription": {"text": "Ensure the ELBv2 (Application/Network) has access logging enabled"}, "help": {"text": "Ensure the ELBv2 (Application/Network) has access logging enabled\nResource: module.alb.aws_lb.habesha_store"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/bc-aws-logging-22"}, {"id": "CKV_AWS_310", "name": "Ensure CloudFront distributions should have origin failover configured", "shortDescription": {"text": "Ensure CloudFront distributions should have origin failover configured"}, "fullDescription": {"text": "Ensure CloudFront distributions should have origin failover configured"}, "help": {"text": "Ensure CloudFront distributions should have origin failover configured\nResource: aws_cloudfront_distribution.habesha_store"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-310"}, {"id": "CKV_AWS_374", "name": "Ensure AWS CloudFront web distribution has geo restriction enabled", "shortDescription": {"text": "Ensure AWS CloudFront web distribution has geo restriction enabled"}, "fullDescription": {"text": "Ensure AWS CloudFront web distribution has geo restriction enabled"}, "help": {"text": "Ensure AWS CloudFront web distribution has geo restriction enabled\nResource: aws_cloudfront_distribution.habesha_store"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/bc-aws-374"}, {"id": "CKV_AWS_174", "name": "Verify CloudFront Distribution Viewer Certificate is using TLS v1.2", "shortDescription": {"text": "Verify CloudFront Distribution Viewer Certificate is using TLS v1.2"}, "fullDescription": {"text": "Verify CloudFront Distribution Viewer Certificate is using TLS v1.2"}, "help": {"text": "Verify CloudFront Distribution Viewer Certificate is using TLS v1.2\nResource: aws_cloudfront_distribution.habesha_store"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/bc-aws-networking-63"}, {"id": "CKV_AWS_116", "name": "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)", "shortDescription": {"text": "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"}, "fullDescription": {"text": "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"}, "help": {"text": "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)\nResource: aws_lambda_function.security_headers"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-aws-lambda-function-is-configured-for-a-dead-letter-queue-dlq"}, {"id": "CKV_AWS_115", "name": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit", "shortDescription": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"}, "fullDescription": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"}, "help": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit\nResource: aws_lambda_function.security_headers"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-aws-lambda-function-is-configured-for-function-level-concurrent-execution-limit"}, {"id": "CKV_AWS_117", "name": "Ensure that AWS Lambda function is configured inside a VPC", "shortDescription": {"text": "Ensure that AWS Lambda function is configured inside a VPC"}, "fullDescription": {"text": "Ensure that AWS Lambda function is configured inside a VPC"}, "help": {"text": "Ensure that AWS Lambda function is configured inside a VPC\nResource: aws_lambda_function.security_headers"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-aws-lambda-function-is-configured-inside-a-vpc-1"}, {"id": "CKV_AWS_50", "name": "X-Ray tracing is enabled for Lambda", "shortDescription": {"text": "X-Ray tracing is enabled for Lambda"}, "fullDescription": {"text": "X-Ray tracing is enabled for Lambda"}, "help": {"text": "X-Ray tracing is enabled for Lambda\nResource: aws_lambda_function.security_headers"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-serverless-policies/bc-aws-serverless-4"}, {"id": "CKV_AWS_226", "name": "Ensure DB instance gets all minor upgrades automatically", "shortDescription": {"text": "Ensure DB instance gets all minor upgrades automatically"}, "fullDescription": {"text": "Ensure DB instance gets all minor upgrades automatically"}, "help": {"text": "Ensure DB instance gets all minor upgrades automatically\nResource: module.rds.aws_db_instance.postgresql"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-aws-db-instance-gets-all-minor-upgrades-automatically"}, {"id": "CKV_AWS_118", "name": "Ensure that enhanced monitoring is enabled for Amazon RDS instances", "shortDescription": {"text": "Ensure that enhanced monitoring is enabled for Amazon RDS instances"}, "fullDescription": {"text": "Ensure that enhanced monitoring is enabled for Amazon RDS instances"}, "help": {"text": "Ensure that enhanced monitoring is enabled for Amazon RDS instances\nResource: module.rds.aws_db_instance.postgresql"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/ensure-that-enhanced-monitoring-is-enabled-for-amazon-rds-instances"}, {"id": "CKV_AWS_161", "name": "Ensure RDS database has IAM authentication enabled", "shortDescription": {"text": "Ensure RDS database has IAM authentication enabled"}, "fullDescription": {"text": "Ensure RDS database has IAM authentication enabled"}, "help": {"text": "Ensure RDS database has IAM authentication enabled\nResource: module.rds.aws_db_instance.postgresql"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/ensure-rds-database-has-iam-authentication-enabled"}, {"id": "CKV_AWS_293", "name": "Ensure that AWS database instances have deletion protection enabled", "shortDescription": {"text": "Ensure that AWS database instances have deletion protection enabled"}, "fullDescription": {"text": "Ensure that AWS database instances have deletion protection enabled"}, "help": {"text": "Ensure that AWS database instances have deletion protection enabled\nResource: module.rds.aws_db_instance.postgresql"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-293"}, {"id": "CKV_AWS_353", "name": "Ensure that RDS instances have performance insights enabled", "shortDescription": {"text": "Ensure that RDS instances have performance insights enabled"}, "fullDescription": {"text": "Ensure that RDS instances have performance insights enabled"}, "help": {"text": "Ensure that RDS instances have performance insights enabled\nResource: module.rds.aws_db_instance.postgresql"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/bc-aws-353"}, {"id": "CKV_AWS_157", "name": "Ensure that RDS instances have Multi-AZ enabled", "shortDescription": {"text": "Ensure that RDS instances have Multi-AZ enabled"}, "fullDescription": {"text": "Ensure that RDS instances have Multi-AZ enabled"}, "help": {"text": "Ensure that RDS instances have Multi-AZ enabled\nResource: module.rds.aws_db_instance.postgresql"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/general-73"}, {"id": "CKV_AWS_300", "name": "Ensure S3 lifecycle configuration sets period for aborting failed uploads", "shortDescription": {"text": "Ensure S3 lifecycle configuration sets period for aborting failed uploads"}, "fullDescription": {"text": "Ensure S3 lifecycle configuration sets period for aborting failed uploads"}, "help": {"text": "Ensure S3 lifecycle configuration sets period for aborting failed uploads\nResource: aws_s3_bucket_lifecycle_configuration.logs[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-300"}, {"id": "CKV_AWS_260", "name": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 80", "shortDescription": {"text": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 80"}, "fullDescription": {"text": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 80"}, "help": {"text": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 80\nResource: module.security_groups.aws_security_group.alb"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/ensure-aws-security-groups-do-not-allow-ingress-from-00000-to-port-80"}, {"id": "CKV_AWS_24", "name": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 22", "shortDescription": {"text": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 22"}, "fullDescription": {"text": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 22"}, "help": {"text": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 22\nResource: module.security_groups.aws_security_group.bastion"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/networking-1-port-security"}, {"id": "CKV_AWS_130", "name": "Ensure VPC subnets do not assign public IP by default", "shortDescription": {"text": "Ensure VPC subnets do not assign public IP by default"}, "fullDescription": {"text": "Ensure VPC subnets do not assign public IP by default"}, "help": {"text": "Ensure VPC subnets do not assign public IP by default\nResource: module.vpc.aws_subnet.public[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/ensure-vpc-subnets-do-not-assign-public-ip-by-default"}, {"id": "CKV_AWS_103", "name": "Ensure that load balancer is using at least TLS 1.2", "shortDescription": {"text": "Ensure that load balancer is using at least TLS 1.2"}, "fullDescription": {"text": "Ensure that load balancer is using at least TLS 1.2"}, "help": {"text": "Ensure that load balancer is using at least TLS 1.2\nResource: module.alb.aws_lb_listener.https"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-general-43"}, {"id": "CKV_AWS_18", "name": "Ensure the S3 bucket has access logging enabled", "shortDescription": {"text": "Ensure the S3 bucket has access logging enabled"}, "fullDescription": {"text": "Ensure the S3 bucket has access logging enabled"}, "help": {"text": "Ensure the S3 bucket has access logging enabled\nResource: aws_s3_bucket.logs[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/s3-13-enable-logging"}, {"id": "CKV_AWS_144", "name": "Ensure that S3 bucket has cross-region replication enabled", "shortDescription": {"text": "Ensure that S3 bucket has cross-region replication enabled"}, "fullDescription": {"text": "Ensure that S3 bucket has cross-region replication enabled"}, "help": {"text": "Ensure that S3 bucket has cross-region replication enabled\nResource: aws_s3_bucket.habesha_store_files"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-s3-bucket-has-cross-region-replication-enabled"}, {"id": "CKV_AWS_21", "name": "Ensure all data stored in the S3 bucket have versioning enabled", "shortDescription": {"text": "Ensure all data stored in the S3 bucket have versioning enabled"}, "fullDescription": {"text": "Ensure all data stored in the S3 bucket have versioning enabled"}, "help": {"text": "Ensure all data stored in the S3 bucket have versioning enabled\nResource: aws_s3_bucket.logs[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/s3-16-enable-versioning"}, {"id": "CKV_AWS_145", "name": "Ensure that S3 buckets are encrypted with KMS by default", "shortDescription": {"text": "Ensure that S3 buckets are encrypted with KMS by default"}, "fullDescription": {"text": "Ensure that S3 buckets are encrypted with KMS by default"}, "help": {"text": "Ensure that S3 buckets are encrypted with KMS by default\nResource: aws_s3_bucket.logs[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-s3-buckets-are-encrypted-with-kms-by-default"}], "organization": "bridgecrew"}}, "results": [{"ruleId": "CKV_AWS_272", "ruleIndex": 0, "level": "error", "attachments": [], "message": {"text": "Ensure AWS Lambda function is configured to validate code-signing"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "infrastructure/key-rotation.tf"}, "region": {"startLine": 119, "endLine": 173, "snippet": {"text": "resource \"aws_lambda_function\" \"key_rotation\" {\n  filename         = data.archive_file.key_rotation_lambda_zip.output_path\n  function_name    = \"meqenet-key-rotation\"\n  role            = aws_iam_role.key_rotation_lambda_role.arn\n  handler         = \"index.handler\"\n  runtime         = \"nodejs18.x\"\n  timeout         = 300\n  memory_size     = 256\n\n  # Fix CKV_AWS_173 - Encrypt environment variables with KMS\n  kms_key_arn = aws_kms_key.secrets.arn\n\n  environment {\n    variables = {\n      AWS_REGION                    = var.aws_region\n      KEY_ROTATION_INTERVAL_DAYS    = var.key_rotation_interval_days\n      MAX_ACTIVE_KEYS              = var.max_active_keys\n      KEY_PREFIX                   = var.key_prefix\n      LOG_LEVEL                    = var.log_level\n      ALERT_SNS_TOPIC_ARN         = aws_sns_topic.key_rotation_alerts.arn\n    }\n  }\n\n  # Fix CKV_AWS_117 - Configure Lambda inside VPC for security\n  vpc_config {\n    subnet_ids         = [aws_subnet.private_a.id, aws_subnet.private_b.id]\n    security_group_ids = [aws_security_group.lambda.id]\n  }\n\n  # Fix CKV_AWS_116 - Add Dead Letter Queue (DLQ)\n  dead_letter_config {\n    target_arn = aws_sqs_queue.key_rotation_dlq.arn\n  }\n\n  # Fix CKV_AWS_50 - Enable X-Ray tracing\n  tracing_config {\n    mode = \"Active\"\n  }\n\n  # Fix CKV_AWS_115 - Set concurrent execution limit\n  reserved_concurrent_executions = 5\n\n  tags = {\n    Name        = \"meqenet-key-rotation-lambda\"\n    Environment = var.environment\n    Service     = \"auth-service\"\n    Purpose     = \"security-key-rotation\"\n  }\n\n  depends_on = [\n    aws_iam_role_policy.key_rotation_lambda_policy,\n    aws_cloudwatch_log_group.key_rotation_lambda_logs,\n    aws_sqs_queue.key_rotation_dlq\n  ]\n}\n"}}}}]}, {"ruleId": "CKV_AWS_23", "ruleIndex": 1, "level": "error", "attachments": [], "message": {"text": "Ensure every security group and rule has a description"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "infrastructure/key-rotation.tf"}, "region": {"startLine": 208, "endLine": 226, "snippet": {"text": "resource \"aws_security_group\" \"lambda\" {\n  name_prefix = \"meqenet-lambda-\"\n  vpc_id      = aws_vpc.main.id\n\n  # Fix CKV_AWS_23 - Add descriptions to security group rules\n  egress {\n    description = \"Allow all outbound traffic\"\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  tags = {\n    Name        = \"meqenet-lambda-sg\"\n    Environment = var.environment\n    Service     = \"lambda\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_382", "ruleIndex": 2, "level": "error", "attachments": [], "message": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "infrastructure/key-rotation.tf"}, "region": {"startLine": 208, "endLine": 226, "snippet": {"text": "resource \"aws_security_group\" \"lambda\" {\n  name_prefix = \"meqenet-lambda-\"\n  vpc_id      = aws_vpc.main.id\n\n  # Fix CKV_AWS_23 - Add descriptions to security group rules\n  egress {\n    description = \"Allow all outbound traffic\"\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  tags = {\n    Name        = \"meqenet-lambda-sg\"\n    Environment = var.environment\n    Service     = \"lambda\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_131", "ruleIndex": 3, "level": "error", "attachments": [], "message": {"text": "Ensure that ALB drops HTTP headers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/alb/main.tf"}, "region": {"startLine": 1, "endLine": 15, "snippet": {"text": "resource \"aws_lb\" \"habesha_store\" {\n  name               = \"habesha-store-alb-${var.environment}\"\n  internal           = false\n  load_balancer_type = \"application\"\n  security_groups    = var.security_groups\n  subnets            = var.public_subnets\n\n  enable_deletion_protection = var.environment == \"production\"\n\n  tags = {\n    Name        = \"habesha-store-alb\"\n    Environment = var.environment\n    Purpose     = \"ALB for Ethiopian creator platform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_91", "ruleIndex": 4, "level": "error", "attachments": [], "message": {"text": "Ensure the ELBv2 (Application/Network) has access logging enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/alb/main.tf"}, "region": {"startLine": 1, "endLine": 15, "snippet": {"text": "resource \"aws_lb\" \"habesha_store\" {\n  name               = \"habesha-store-alb-${var.environment}\"\n  internal           = false\n  load_balancer_type = \"application\"\n  security_groups    = var.security_groups\n  subnets            = var.public_subnets\n\n  enable_deletion_protection = var.environment == \"production\"\n\n  tags = {\n    Name        = \"habesha-store-alb\"\n    Environment = var.environment\n    Purpose     = \"ALB for Ethiopian creator platform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_310", "ruleIndex": 5, "level": "error", "attachments": [], "message": {"text": "Ensure CloudFront distributions should have origin failover configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/cloudfront/main.tf"}, "region": {"startLine": 1, "endLine": 107, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"habesha_store\" {\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = \"Habesha Store CDN - Optimized for Ethiopian users\"\n  default_root_object = \"index.html\"\n  price_class         = \"PriceClass_100\" # Africa optimized pricing\n\n  # Origin configuration for web app\n  origin {\n    domain_name = var.alb_dns_name\n    origin_id   = \"habesha-store-alb\"\n\n    custom_origin_config {\n      http_port              = 80\n      https_port             = 443\n      origin_protocol_policy = \"https-only\"\n      origin_ssl_protocols   = [\"TLSv1.2\"]\n    }\n\n    # Ethiopian-specific headers\n    custom_header {\n      name  = \"X-Ethiopian-Market\"\n      value = \"enabled\"\n    }\n  }\n\n  # Ethiopian edge locations optimization\n  default_cache_behavior {\n    allowed_methods  = [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\"]\n    cached_methods   = [\"GET\", \"HEAD\", \"OPTIONS\"]\n    target_origin_id = \"habesha-store-alb\"\n\n    forwarded_values {\n      query_string = true\n      headers      = [\"*\"]\n\n      cookies {\n        forward = \"all\"\n      }\n    }\n\n    viewer_protocol_policy = \"redirect-to-https\"\n    min_ttl                = 0\n    default_ttl            = 0\n    max_ttl                = 86400\n\n    # Ethiopian bandwidth optimization\n    compress               = true\n\n    # Security headers for Ethiopian market\n    lambda_function_association {\n      event_type   = \"viewer-response\"\n      lambda_arn   = aws_lambda_function.security_headers.qualified_arn\n      include_body = false\n    }\n  }\n\n  # Geographic restrictions for Ethiopian compliance\n  restrictions {\n    geo_restriction {\n      restriction_type = \"none\"\n      # Could be configured for Ethiopian market compliance if needed\n      # locations        = [\"ET\", \"KE\", \"TZ\", \"UG\"] # Ethiopia and neighboring countries\n    }\n  }\n\n  # SSL Certificate\n  viewer_certificate {\n    cloudfront_default_certificate = true\n    # acm_certificate_arn            = var.ssl_certificate_arn\n    # ssl_support_method             = \"sni-only\"\n    # minimum_protocol_version       = \"TLSv1.2_2021\"\n    # TODO: Add proper SSL certificate for production\n  }\n\n  # Custom error pages for Ethiopian users\n  custom_error_response {\n    error_code         = 404\n    response_code      = 404\n    response_page_path = \"/404.html\"\n  }\n\n  custom_error_response {\n    error_code         = 500\n    response_code      = 500\n    response_page_path = \"/500.html\"\n  }\n\n  # Ethiopian localized logging\n  logging_config {\n    include_cookies = false\n    bucket          = var.log_bucket_domain_name\n    prefix          = \"cloudfront/ethiopian-market/\"\n  }\n\n  # Performance optimizations for Ethiopian bandwidth\n  web_acl_id = var.waf_arn\n\n  tags = {\n    Name            = \"habesha-store-cloudfront\"\n    Environment     = var.environment\n    Service         = \"CDN\"\n    Region          = \"Cape Town\"\n    Purpose         = \"Ethiopian Creator Platform\"\n    Optimization    = \"Low Bandwidth\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_374", "ruleIndex": 6, "level": "error", "attachments": [], "message": {"text": "Ensure AWS CloudFront web distribution has geo restriction enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/cloudfront/main.tf"}, "region": {"startLine": 1, "endLine": 107, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"habesha_store\" {\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = \"Habesha Store CDN - Optimized for Ethiopian users\"\n  default_root_object = \"index.html\"\n  price_class         = \"PriceClass_100\" # Africa optimized pricing\n\n  # Origin configuration for web app\n  origin {\n    domain_name = var.alb_dns_name\n    origin_id   = \"habesha-store-alb\"\n\n    custom_origin_config {\n      http_port              = 80\n      https_port             = 443\n      origin_protocol_policy = \"https-only\"\n      origin_ssl_protocols   = [\"TLSv1.2\"]\n    }\n\n    # Ethiopian-specific headers\n    custom_header {\n      name  = \"X-Ethiopian-Market\"\n      value = \"enabled\"\n    }\n  }\n\n  # Ethiopian edge locations optimization\n  default_cache_behavior {\n    allowed_methods  = [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\"]\n    cached_methods   = [\"GET\", \"HEAD\", \"OPTIONS\"]\n    target_origin_id = \"habesha-store-alb\"\n\n    forwarded_values {\n      query_string = true\n      headers      = [\"*\"]\n\n      cookies {\n        forward = \"all\"\n      }\n    }\n\n    viewer_protocol_policy = \"redirect-to-https\"\n    min_ttl                = 0\n    default_ttl            = 0\n    max_ttl                = 86400\n\n    # Ethiopian bandwidth optimization\n    compress               = true\n\n    # Security headers for Ethiopian market\n    lambda_function_association {\n      event_type   = \"viewer-response\"\n      lambda_arn   = aws_lambda_function.security_headers.qualified_arn\n      include_body = false\n    }\n  }\n\n  # Geographic restrictions for Ethiopian compliance\n  restrictions {\n    geo_restriction {\n      restriction_type = \"none\"\n      # Could be configured for Ethiopian market compliance if needed\n      # locations        = [\"ET\", \"KE\", \"TZ\", \"UG\"] # Ethiopia and neighboring countries\n    }\n  }\n\n  # SSL Certificate\n  viewer_certificate {\n    cloudfront_default_certificate = true\n    # acm_certificate_arn            = var.ssl_certificate_arn\n    # ssl_support_method             = \"sni-only\"\n    # minimum_protocol_version       = \"TLSv1.2_2021\"\n    # TODO: Add proper SSL certificate for production\n  }\n\n  # Custom error pages for Ethiopian users\n  custom_error_response {\n    error_code         = 404\n    response_code      = 404\n    response_page_path = \"/404.html\"\n  }\n\n  custom_error_response {\n    error_code         = 500\n    response_code      = 500\n    response_page_path = \"/500.html\"\n  }\n\n  # Ethiopian localized logging\n  logging_config {\n    include_cookies = false\n    bucket          = var.log_bucket_domain_name\n    prefix          = \"cloudfront/ethiopian-market/\"\n  }\n\n  # Performance optimizations for Ethiopian bandwidth\n  web_acl_id = var.waf_arn\n\n  tags = {\n    Name            = \"habesha-store-cloudfront\"\n    Environment     = var.environment\n    Service         = \"CDN\"\n    Region          = \"Cape Town\"\n    Purpose         = \"Ethiopian Creator Platform\"\n    Optimization    = \"Low Bandwidth\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_174", "ruleIndex": 7, "level": "error", "attachments": [], "message": {"text": "Verify CloudFront Distribution Viewer Certificate is using TLS v1.2"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/cloudfront/main.tf"}, "region": {"startLine": 1, "endLine": 107, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"habesha_store\" {\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = \"Habesha Store CDN - Optimized for Ethiopian users\"\n  default_root_object = \"index.html\"\n  price_class         = \"PriceClass_100\" # Africa optimized pricing\n\n  # Origin configuration for web app\n  origin {\n    domain_name = var.alb_dns_name\n    origin_id   = \"habesha-store-alb\"\n\n    custom_origin_config {\n      http_port              = 80\n      https_port             = 443\n      origin_protocol_policy = \"https-only\"\n      origin_ssl_protocols   = [\"TLSv1.2\"]\n    }\n\n    # Ethiopian-specific headers\n    custom_header {\n      name  = \"X-Ethiopian-Market\"\n      value = \"enabled\"\n    }\n  }\n\n  # Ethiopian edge locations optimization\n  default_cache_behavior {\n    allowed_methods  = [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\"]\n    cached_methods   = [\"GET\", \"HEAD\", \"OPTIONS\"]\n    target_origin_id = \"habesha-store-alb\"\n\n    forwarded_values {\n      query_string = true\n      headers      = [\"*\"]\n\n      cookies {\n        forward = \"all\"\n      }\n    }\n\n    viewer_protocol_policy = \"redirect-to-https\"\n    min_ttl                = 0\n    default_ttl            = 0\n    max_ttl                = 86400\n\n    # Ethiopian bandwidth optimization\n    compress               = true\n\n    # Security headers for Ethiopian market\n    lambda_function_association {\n      event_type   = \"viewer-response\"\n      lambda_arn   = aws_lambda_function.security_headers.qualified_arn\n      include_body = false\n    }\n  }\n\n  # Geographic restrictions for Ethiopian compliance\n  restrictions {\n    geo_restriction {\n      restriction_type = \"none\"\n      # Could be configured for Ethiopian market compliance if needed\n      # locations        = [\"ET\", \"KE\", \"TZ\", \"UG\"] # Ethiopia and neighboring countries\n    }\n  }\n\n  # SSL Certificate\n  viewer_certificate {\n    cloudfront_default_certificate = true\n    # acm_certificate_arn            = var.ssl_certificate_arn\n    # ssl_support_method             = \"sni-only\"\n    # minimum_protocol_version       = \"TLSv1.2_2021\"\n    # TODO: Add proper SSL certificate for production\n  }\n\n  # Custom error pages for Ethiopian users\n  custom_error_response {\n    error_code         = 404\n    response_code      = 404\n    response_page_path = \"/404.html\"\n  }\n\n  custom_error_response {\n    error_code         = 500\n    response_code      = 500\n    response_page_path = \"/500.html\"\n  }\n\n  # Ethiopian localized logging\n  logging_config {\n    include_cookies = false\n    bucket          = var.log_bucket_domain_name\n    prefix          = \"cloudfront/ethiopian-market/\"\n  }\n\n  # Performance optimizations for Ethiopian bandwidth\n  web_acl_id = var.waf_arn\n\n  tags = {\n    Name            = \"habesha-store-cloudfront\"\n    Environment     = var.environment\n    Service         = \"CDN\"\n    Region          = \"Cape Town\"\n    Purpose         = \"Ethiopian Creator Platform\"\n    Optimization    = \"Low Bandwidth\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_272", "ruleIndex": 0, "level": "error", "attachments": [], "message": {"text": "Ensure AWS Lambda function is configured to validate code-signing"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/cloudfront/main.tf"}, "region": {"startLine": 110, "endLine": 126, "snippet": {"text": "resource \"aws_lambda_function\" \"security_headers\" {\n  filename         = data.archive_file.security_headers.output_path\n  function_name    = \"habesha-store-security-headers-${var.environment}\"\n  role            = aws_iam_role.lambda_edge.arn\n  handler         = \"index.handler\"\n  runtime         = \"nodejs18.x\"\n  publish         = true\n\n  # Ethiopian bandwidth optimization\n  memory_size     = 128\n  timeout         = 5\n\n  tags = {\n    Name        = \"habesha-store-security-headers\"\n    Environment = var.environment\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_116", "ruleIndex": 8, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/cloudfront/main.tf"}, "region": {"startLine": 110, "endLine": 126, "snippet": {"text": "resource \"aws_lambda_function\" \"security_headers\" {\n  filename         = data.archive_file.security_headers.output_path\n  function_name    = \"habesha-store-security-headers-${var.environment}\"\n  role            = aws_iam_role.lambda_edge.arn\n  handler         = \"index.handler\"\n  runtime         = \"nodejs18.x\"\n  publish         = true\n\n  # Ethiopian bandwidth optimization\n  memory_size     = 128\n  timeout         = 5\n\n  tags = {\n    Name        = \"habesha-store-security-headers\"\n    Environment = var.environment\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_115", "ruleIndex": 9, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/cloudfront/main.tf"}, "region": {"startLine": 110, "endLine": 126, "snippet": {"text": "resource \"aws_lambda_function\" \"security_headers\" {\n  filename         = data.archive_file.security_headers.output_path\n  function_name    = \"habesha-store-security-headers-${var.environment}\"\n  role            = aws_iam_role.lambda_edge.arn\n  handler         = \"index.handler\"\n  runtime         = \"nodejs18.x\"\n  publish         = true\n\n  # Ethiopian bandwidth optimization\n  memory_size     = 128\n  timeout         = 5\n\n  tags = {\n    Name        = \"habesha-store-security-headers\"\n    Environment = var.environment\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_117", "ruleIndex": 10, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS Lambda function is configured inside a VPC"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/cloudfront/main.tf"}, "region": {"startLine": 110, "endLine": 126, "snippet": {"text": "resource \"aws_lambda_function\" \"security_headers\" {\n  filename         = data.archive_file.security_headers.output_path\n  function_name    = \"habesha-store-security-headers-${var.environment}\"\n  role            = aws_iam_role.lambda_edge.arn\n  handler         = \"index.handler\"\n  runtime         = \"nodejs18.x\"\n  publish         = true\n\n  # Ethiopian bandwidth optimization\n  memory_size     = 128\n  timeout         = 5\n\n  tags = {\n    Name        = \"habesha-store-security-headers\"\n    Environment = var.environment\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_50", "ruleIndex": 11, "level": "error", "attachments": [], "message": {"text": "X-Ray tracing is enabled for Lambda"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/cloudfront/main.tf"}, "region": {"startLine": 110, "endLine": 126, "snippet": {"text": "resource \"aws_lambda_function\" \"security_headers\" {\n  filename         = data.archive_file.security_headers.output_path\n  function_name    = \"habesha-store-security-headers-${var.environment}\"\n  role            = aws_iam_role.lambda_edge.arn\n  handler         = \"index.handler\"\n  runtime         = \"nodejs18.x\"\n  publish         = true\n\n  # Ethiopian bandwidth optimization\n  memory_size     = 128\n  timeout         = 5\n\n  tags = {\n    Name        = \"habesha-store-security-headers\"\n    Environment = var.environment\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_226", "ruleIndex": 12, "level": "error", "attachments": [], "message": {"text": "Ensure DB instance gets all minor upgrades automatically"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/rds/main.tf"}, "region": {"startLine": 1, "endLine": 53, "snippet": {"text": "resource \"aws_db_instance\" \"postgresql\" {\n  identifier = \"habesha-store-postgres-${var.environment}\"\n\n  # Engine configuration\n  engine         = \"postgres\"\n  engine_version = \"15.4\"\n  instance_class = var.environment == \"production\" ? \"db.r6g.large\" : \"db.t4g.medium\"\n\n  # Database configuration\n  db_name  = \"habesha_store\"\n  username = var.db_username\n  password = var.db_password\n\n  # Storage\n  allocated_storage     = var.environment == \"production\" ? 100 : 20\n  max_allocated_storage = var.environment == \"production\" ? 1000 : 50\n  storage_type          = \"gp3\"\n  storage_encrypted     = true\n  kms_key_id           = aws_kms_key.rds.arn\n\n  # Network\n  db_subnet_group_name   = var.database_subnets\n  vpc_security_group_ids = [var.security_group_id]\n  publicly_accessible    = false\n\n  # Backup and maintenance\n  backup_retention_period = var.environment == \"production\" ? 30 : 7\n  backup_window          = \"03:00-04:00\"\n  maintenance_window     = \"sun:04:00-sun:05:00\"\n\n  # Monitoring\n  monitoring_interval          = var.environment == \"production\" ? 30 : 0\n  monitoring_role_arn         = var.environment == \"production\" ? aws_iam_role.rds_monitoring[0].arn : null\n  enabled_cloudwatch_logs_exports = [\"postgresql\", \"upgrade\"]\n\n  # Parameter group for Ethiopian localization\n  parameter_group_name = aws_db_parameter_group.postgresql.name\n\n  # Final snapshot\n  skip_final_snapshot       = var.environment != \"production\"\n  final_snapshot_identifier = var.environment == \"production\" ? \"habesha-store-final-snapshot-${var.environment}-${formatdate(\"YYYY-MM-DD-hhmm\", timestamp())}\" : null\n\n  # Performance Insights (production only)\n  performance_insights_enabled    = var.environment == \"production\"\n  performance_insights_kms_key_id = var.environment == \"production\" ? aws_kms_key.rds.arn : null\n\n  tags = {\n    Name = \"habesha-store-postgres-${var.environment}\"\n    Environment = var.environment\n    Service     = \"Database\"\n    Engine      = \"PostgreSQL\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_118", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Ensure that enhanced monitoring is enabled for Amazon RDS instances"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/rds/main.tf"}, "region": {"startLine": 1, "endLine": 53, "snippet": {"text": "resource \"aws_db_instance\" \"postgresql\" {\n  identifier = \"habesha-store-postgres-${var.environment}\"\n\n  # Engine configuration\n  engine         = \"postgres\"\n  engine_version = \"15.4\"\n  instance_class = var.environment == \"production\" ? \"db.r6g.large\" : \"db.t4g.medium\"\n\n  # Database configuration\n  db_name  = \"habesha_store\"\n  username = var.db_username\n  password = var.db_password\n\n  # Storage\n  allocated_storage     = var.environment == \"production\" ? 100 : 20\n  max_allocated_storage = var.environment == \"production\" ? 1000 : 50\n  storage_type          = \"gp3\"\n  storage_encrypted     = true\n  kms_key_id           = aws_kms_key.rds.arn\n\n  # Network\n  db_subnet_group_name   = var.database_subnets\n  vpc_security_group_ids = [var.security_group_id]\n  publicly_accessible    = false\n\n  # Backup and maintenance\n  backup_retention_period = var.environment == \"production\" ? 30 : 7\n  backup_window          = \"03:00-04:00\"\n  maintenance_window     = \"sun:04:00-sun:05:00\"\n\n  # Monitoring\n  monitoring_interval          = var.environment == \"production\" ? 30 : 0\n  monitoring_role_arn         = var.environment == \"production\" ? aws_iam_role.rds_monitoring[0].arn : null\n  enabled_cloudwatch_logs_exports = [\"postgresql\", \"upgrade\"]\n\n  # Parameter group for Ethiopian localization\n  parameter_group_name = aws_db_parameter_group.postgresql.name\n\n  # Final snapshot\n  skip_final_snapshot       = var.environment != \"production\"\n  final_snapshot_identifier = var.environment == \"production\" ? \"habesha-store-final-snapshot-${var.environment}-${formatdate(\"YYYY-MM-DD-hhmm\", timestamp())}\" : null\n\n  # Performance Insights (production only)\n  performance_insights_enabled    = var.environment == \"production\"\n  performance_insights_kms_key_id = var.environment == \"production\" ? aws_kms_key.rds.arn : null\n\n  tags = {\n    Name = \"habesha-store-postgres-${var.environment}\"\n    Environment = var.environment\n    Service     = \"Database\"\n    Engine      = \"PostgreSQL\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_161", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Ensure RDS database has IAM authentication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/rds/main.tf"}, "region": {"startLine": 1, "endLine": 53, "snippet": {"text": "resource \"aws_db_instance\" \"postgresql\" {\n  identifier = \"habesha-store-postgres-${var.environment}\"\n\n  # Engine configuration\n  engine         = \"postgres\"\n  engine_version = \"15.4\"\n  instance_class = var.environment == \"production\" ? \"db.r6g.large\" : \"db.t4g.medium\"\n\n  # Database configuration\n  db_name  = \"habesha_store\"\n  username = var.db_username\n  password = var.db_password\n\n  # Storage\n  allocated_storage     = var.environment == \"production\" ? 100 : 20\n  max_allocated_storage = var.environment == \"production\" ? 1000 : 50\n  storage_type          = \"gp3\"\n  storage_encrypted     = true\n  kms_key_id           = aws_kms_key.rds.arn\n\n  # Network\n  db_subnet_group_name   = var.database_subnets\n  vpc_security_group_ids = [var.security_group_id]\n  publicly_accessible    = false\n\n  # Backup and maintenance\n  backup_retention_period = var.environment == \"production\" ? 30 : 7\n  backup_window          = \"03:00-04:00\"\n  maintenance_window     = \"sun:04:00-sun:05:00\"\n\n  # Monitoring\n  monitoring_interval          = var.environment == \"production\" ? 30 : 0\n  monitoring_role_arn         = var.environment == \"production\" ? aws_iam_role.rds_monitoring[0].arn : null\n  enabled_cloudwatch_logs_exports = [\"postgresql\", \"upgrade\"]\n\n  # Parameter group for Ethiopian localization\n  parameter_group_name = aws_db_parameter_group.postgresql.name\n\n  # Final snapshot\n  skip_final_snapshot       = var.environment != \"production\"\n  final_snapshot_identifier = var.environment == \"production\" ? \"habesha-store-final-snapshot-${var.environment}-${formatdate(\"YYYY-MM-DD-hhmm\", timestamp())}\" : null\n\n  # Performance Insights (production only)\n  performance_insights_enabled    = var.environment == \"production\"\n  performance_insights_kms_key_id = var.environment == \"production\" ? aws_kms_key.rds.arn : null\n\n  tags = {\n    Name = \"habesha-store-postgres-${var.environment}\"\n    Environment = var.environment\n    Service     = \"Database\"\n    Engine      = \"PostgreSQL\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_293", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS database instances have deletion protection enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/rds/main.tf"}, "region": {"startLine": 1, "endLine": 53, "snippet": {"text": "resource \"aws_db_instance\" \"postgresql\" {\n  identifier = \"habesha-store-postgres-${var.environment}\"\n\n  # Engine configuration\n  engine         = \"postgres\"\n  engine_version = \"15.4\"\n  instance_class = var.environment == \"production\" ? \"db.r6g.large\" : \"db.t4g.medium\"\n\n  # Database configuration\n  db_name  = \"habesha_store\"\n  username = var.db_username\n  password = var.db_password\n\n  # Storage\n  allocated_storage     = var.environment == \"production\" ? 100 : 20\n  max_allocated_storage = var.environment == \"production\" ? 1000 : 50\n  storage_type          = \"gp3\"\n  storage_encrypted     = true\n  kms_key_id           = aws_kms_key.rds.arn\n\n  # Network\n  db_subnet_group_name   = var.database_subnets\n  vpc_security_group_ids = [var.security_group_id]\n  publicly_accessible    = false\n\n  # Backup and maintenance\n  backup_retention_period = var.environment == \"production\" ? 30 : 7\n  backup_window          = \"03:00-04:00\"\n  maintenance_window     = \"sun:04:00-sun:05:00\"\n\n  # Monitoring\n  monitoring_interval          = var.environment == \"production\" ? 30 : 0\n  monitoring_role_arn         = var.environment == \"production\" ? aws_iam_role.rds_monitoring[0].arn : null\n  enabled_cloudwatch_logs_exports = [\"postgresql\", \"upgrade\"]\n\n  # Parameter group for Ethiopian localization\n  parameter_group_name = aws_db_parameter_group.postgresql.name\n\n  # Final snapshot\n  skip_final_snapshot       = var.environment != \"production\"\n  final_snapshot_identifier = var.environment == \"production\" ? \"habesha-store-final-snapshot-${var.environment}-${formatdate(\"YYYY-MM-DD-hhmm\", timestamp())}\" : null\n\n  # Performance Insights (production only)\n  performance_insights_enabled    = var.environment == \"production\"\n  performance_insights_kms_key_id = var.environment == \"production\" ? aws_kms_key.rds.arn : null\n\n  tags = {\n    Name = \"habesha-store-postgres-${var.environment}\"\n    Environment = var.environment\n    Service     = \"Database\"\n    Engine      = \"PostgreSQL\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_353", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS instances have performance insights enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/rds/main.tf"}, "region": {"startLine": 1, "endLine": 53, "snippet": {"text": "resource \"aws_db_instance\" \"postgresql\" {\n  identifier = \"habesha-store-postgres-${var.environment}\"\n\n  # Engine configuration\n  engine         = \"postgres\"\n  engine_version = \"15.4\"\n  instance_class = var.environment == \"production\" ? \"db.r6g.large\" : \"db.t4g.medium\"\n\n  # Database configuration\n  db_name  = \"habesha_store\"\n  username = var.db_username\n  password = var.db_password\n\n  # Storage\n  allocated_storage     = var.environment == \"production\" ? 100 : 20\n  max_allocated_storage = var.environment == \"production\" ? 1000 : 50\n  storage_type          = \"gp3\"\n  storage_encrypted     = true\n  kms_key_id           = aws_kms_key.rds.arn\n\n  # Network\n  db_subnet_group_name   = var.database_subnets\n  vpc_security_group_ids = [var.security_group_id]\n  publicly_accessible    = false\n\n  # Backup and maintenance\n  backup_retention_period = var.environment == \"production\" ? 30 : 7\n  backup_window          = \"03:00-04:00\"\n  maintenance_window     = \"sun:04:00-sun:05:00\"\n\n  # Monitoring\n  monitoring_interval          = var.environment == \"production\" ? 30 : 0\n  monitoring_role_arn         = var.environment == \"production\" ? aws_iam_role.rds_monitoring[0].arn : null\n  enabled_cloudwatch_logs_exports = [\"postgresql\", \"upgrade\"]\n\n  # Parameter group for Ethiopian localization\n  parameter_group_name = aws_db_parameter_group.postgresql.name\n\n  # Final snapshot\n  skip_final_snapshot       = var.environment != \"production\"\n  final_snapshot_identifier = var.environment == \"production\" ? \"habesha-store-final-snapshot-${var.environment}-${formatdate(\"YYYY-MM-DD-hhmm\", timestamp())}\" : null\n\n  # Performance Insights (production only)\n  performance_insights_enabled    = var.environment == \"production\"\n  performance_insights_kms_key_id = var.environment == \"production\" ? aws_kms_key.rds.arn : null\n\n  tags = {\n    Name = \"habesha-store-postgres-${var.environment}\"\n    Environment = var.environment\n    Service     = \"Database\"\n    Engine      = \"PostgreSQL\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_157", "ruleIndex": 17, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS instances have Multi-AZ enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/rds/main.tf"}, "region": {"startLine": 1, "endLine": 53, "snippet": {"text": "resource \"aws_db_instance\" \"postgresql\" {\n  identifier = \"habesha-store-postgres-${var.environment}\"\n\n  # Engine configuration\n  engine         = \"postgres\"\n  engine_version = \"15.4\"\n  instance_class = var.environment == \"production\" ? \"db.r6g.large\" : \"db.t4g.medium\"\n\n  # Database configuration\n  db_name  = \"habesha_store\"\n  username = var.db_username\n  password = var.db_password\n\n  # Storage\n  allocated_storage     = var.environment == \"production\" ? 100 : 20\n  max_allocated_storage = var.environment == \"production\" ? 1000 : 50\n  storage_type          = \"gp3\"\n  storage_encrypted     = true\n  kms_key_id           = aws_kms_key.rds.arn\n\n  # Network\n  db_subnet_group_name   = var.database_subnets\n  vpc_security_group_ids = [var.security_group_id]\n  publicly_accessible    = false\n\n  # Backup and maintenance\n  backup_retention_period = var.environment == \"production\" ? 30 : 7\n  backup_window          = \"03:00-04:00\"\n  maintenance_window     = \"sun:04:00-sun:05:00\"\n\n  # Monitoring\n  monitoring_interval          = var.environment == \"production\" ? 30 : 0\n  monitoring_role_arn         = var.environment == \"production\" ? aws_iam_role.rds_monitoring[0].arn : null\n  enabled_cloudwatch_logs_exports = [\"postgresql\", \"upgrade\"]\n\n  # Parameter group for Ethiopian localization\n  parameter_group_name = aws_db_parameter_group.postgresql.name\n\n  # Final snapshot\n  skip_final_snapshot       = var.environment != \"production\"\n  final_snapshot_identifier = var.environment == \"production\" ? \"habesha-store-final-snapshot-${var.environment}-${formatdate(\"YYYY-MM-DD-hhmm\", timestamp())}\" : null\n\n  # Performance Insights (production only)\n  performance_insights_enabled    = var.environment == \"production\"\n  performance_insights_kms_key_id = var.environment == \"production\" ? aws_kms_key.rds.arn : null\n\n  tags = {\n    Name = \"habesha-store-postgres-${var.environment}\"\n    Environment = var.environment\n    Service     = \"Database\"\n    Engine      = \"PostgreSQL\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_300", "ruleIndex": 18, "level": "error", "attachments": [], "message": {"text": "Ensure S3 lifecycle configuration sets period for aborting failed uploads"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/s3/main.tf"}, "region": {"startLine": 283, "endLine": 308, "snippet": {"text": "resource \"aws_s3_bucket_lifecycle_configuration\" \"logs\" {\n  count  = var.create_log_bucket ? 1 : 0\n  bucket = aws_s3_bucket.logs[0].id\n\n  rule {\n    id     = \"log_cleanup\"\n    status = \"Enabled\"\n\n    # Delete logs after 365 days\n    expiration {\n      days = 365\n    }\n\n    # Move to IA after 30 days\n    transition {\n      days          = 30\n      storage_class = \"STANDARD_IA\"\n    }\n\n    # Move to Glacier after 90 days\n    transition {\n      days          = 90\n      storage_class = \"GLACIER\"\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_23", "ruleIndex": 1, "level": "error", "attachments": [], "message": {"text": "Ensure every security group and rule has a description"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/security-groups/main.tf"}, "region": {"startLine": 2, "endLine": 37, "snippet": {"text": "resource \"aws_security_group\" \"alb\" {\n  name_prefix = \"habesha-store-alb-${var.environment}-\"\n  vpc_id      = var.vpc_id\n\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n    description = \"HTTP traffic from anywhere\"\n  }\n\n  ingress {\n    from_port   = 443\n    to_port     = 443\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n    description = \"HTTPS traffic from anywhere\"\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n    description = \"Allow all outbound traffic\"\n  }\n\n  tags = {\n    Name = \"habesha-store-alb-sg-${var.environment}\"\n  }\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_382", "ruleIndex": 2, "level": "error", "attachments": [], "message": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/security-groups/main.tf"}, "region": {"startLine": 2, "endLine": 37, "snippet": {"text": "resource \"aws_security_group\" \"alb\" {\n  name_prefix = \"habesha-store-alb-${var.environment}-\"\n  vpc_id      = var.vpc_id\n\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n    description = \"HTTP traffic from anywhere\"\n  }\n\n  ingress {\n    from_port   = 443\n    to_port     = 443\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n    description = \"HTTPS traffic from anywhere\"\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n    description = \"Allow all outbound traffic\"\n  }\n\n  tags = {\n    Name = \"habesha-store-alb-sg-${var.environment}\"\n  }\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_260", "ruleIndex": 19, "level": "error", "attachments": [], "message": {"text": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 80"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/security-groups/main.tf"}, "region": {"startLine": 2, "endLine": 37, "snippet": {"text": "resource \"aws_security_group\" \"alb\" {\n  name_prefix = \"habesha-store-alb-${var.environment}-\"\n  vpc_id      = var.vpc_id\n\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n    description = \"HTTP traffic from anywhere\"\n  }\n\n  ingress {\n    from_port   = 443\n    to_port     = 443\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n    description = \"HTTPS traffic from anywhere\"\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n    description = \"Allow all outbound traffic\"\n  }\n\n  tags = {\n    Name = \"habesha-store-alb-sg-${var.environment}\"\n  }\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_23", "ruleIndex": 1, "level": "error", "attachments": [], "message": {"text": "Ensure every security group and rule has a description"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/security-groups/main.tf"}, "region": {"startLine": 40, "endLine": 84, "snippet": {"text": "resource \"aws_security_group\" \"app\" {\n  name_prefix = \"habesha-store-app-${var.environment}-\"\n  vpc_id      = var.vpc_id\n\n  ingress {\n    from_port       = 3000\n    to_port         = 3000\n    protocol        = \"tcp\"\n    security_groups = [aws_security_group.alb.id]\n    description     = \"Backend API traffic from ALB\"\n  }\n\n  ingress {\n    from_port       = 3001\n    to_port         = 3001\n    protocol        = \"tcp\"\n    security_groups = [aws_security_group.alb.id]\n    description     = \"Web app traffic from ALB\"\n  }\n\n  # SSH access for maintenance (restrict to specific IPs for production)\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"10.0.0.0/8\"] # Limit to VPC CIDR, use specific IPs in production\n    description = \"SSH access for maintenance\"\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n    description = \"Allow all outbound traffic\"\n  }\n\n  tags = {\n    Name = \"habesha-store-app-sg-${var.environment}\"\n  }\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_382", "ruleIndex": 2, "level": "error", "attachments": [], "message": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/security-groups/main.tf"}, "region": {"startLine": 40, "endLine": 84, "snippet": {"text": "resource \"aws_security_group\" \"app\" {\n  name_prefix = \"habesha-store-app-${var.environment}-\"\n  vpc_id      = var.vpc_id\n\n  ingress {\n    from_port       = 3000\n    to_port         = 3000\n    protocol        = \"tcp\"\n    security_groups = [aws_security_group.alb.id]\n    description     = \"Backend API traffic from ALB\"\n  }\n\n  ingress {\n    from_port       = 3001\n    to_port         = 3001\n    protocol        = \"tcp\"\n    security_groups = [aws_security_group.alb.id]\n    description     = \"Web app traffic from ALB\"\n  }\n\n  # SSH access for maintenance (restrict to specific IPs for production)\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"10.0.0.0/8\"] # Limit to VPC CIDR, use specific IPs in production\n    description = \"SSH access for maintenance\"\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n    description = \"Allow all outbound traffic\"\n  }\n\n  tags = {\n    Name = \"habesha-store-app-sg-${var.environment}\"\n  }\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_23", "ruleIndex": 1, "level": "error", "attachments": [], "message": {"text": "Ensure every security group and rule has a description"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/security-groups/main.tf"}, "region": {"startLine": 87, "endLine": 123, "snippet": {"text": "resource \"aws_security_group\" \"rds\" {\n  name_prefix = \"habesha-store-rds-${var.environment}-\"\n  vpc_id      = var.vpc_id\n\n  ingress {\n    from_port       = 5432\n    to_port         = 5432\n    protocol        = \"tcp\"\n    security_groups = [aws_security_group.app.id]\n    description     = \"PostgreSQL access from application layer\"\n  }\n\n  # SSH bastion access (for database maintenance)\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"10.0.0.0/8\"] # Limit to VPC CIDR\n    description = \"SSH bastion access\"\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n    description = \"Allow all outbound traffic\"\n  }\n\n  tags = {\n    Name = \"habesha-store-rds-sg-${var.environment}\"\n  }\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_382", "ruleIndex": 2, "level": "error", "attachments": [], "message": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/security-groups/main.tf"}, "region": {"startLine": 87, "endLine": 123, "snippet": {"text": "resource \"aws_security_group\" \"rds\" {\n  name_prefix = \"habesha-store-rds-${var.environment}-\"\n  vpc_id      = var.vpc_id\n\n  ingress {\n    from_port       = 5432\n    to_port         = 5432\n    protocol        = \"tcp\"\n    security_groups = [aws_security_group.app.id]\n    description     = \"PostgreSQL access from application layer\"\n  }\n\n  # SSH bastion access (for database maintenance)\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"10.0.0.0/8\"] # Limit to VPC CIDR\n    description = \"SSH bastion access\"\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n    description = \"Allow all outbound traffic\"\n  }\n\n  tags = {\n    Name = \"habesha-store-rds-sg-${var.environment}\"\n  }\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_23", "ruleIndex": 1, "level": "error", "attachments": [], "message": {"text": "Ensure every security group and rule has a description"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/security-groups/main.tf"}, "region": {"startLine": 126, "endLine": 153, "snippet": {"text": "resource \"aws_security_group\" \"redis\" {\n  name_prefix = \"habesha-store-redis-${var.environment}-\"\n  vpc_id      = var.vpc_id\n\n  ingress {\n    from_port       = 6379\n    to_port         = 6379\n    protocol        = \"tcp\"\n    security_groups = [aws_security_group.app.id]\n    description     = \"Redis access from application layer\"\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n    description = \"Allow all outbound traffic\"\n  }\n\n  tags = {\n    Name = \"habesha-store-redis-sg-${var.environment}\"\n  }\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_382", "ruleIndex": 2, "level": "error", "attachments": [], "message": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/security-groups/main.tf"}, "region": {"startLine": 126, "endLine": 153, "snippet": {"text": "resource \"aws_security_group\" \"redis\" {\n  name_prefix = \"habesha-store-redis-${var.environment}-\"\n  vpc_id      = var.vpc_id\n\n  ingress {\n    from_port       = 6379\n    to_port         = 6379\n    protocol        = \"tcp\"\n    security_groups = [aws_security_group.app.id]\n    description     = \"Redis access from application layer\"\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n    description = \"Allow all outbound traffic\"\n  }\n\n  tags = {\n    Name = \"habesha-store-redis-sg-${var.environment}\"\n  }\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_23", "ruleIndex": 1, "level": "error", "attachments": [], "message": {"text": "Ensure every security group and rule has a description"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/security-groups/main.tf"}, "region": {"startLine": 156, "endLine": 183, "snippet": {"text": "resource \"aws_security_group\" \"bastion\" {\n  name_prefix = \"habesha-store-bastion-${var.environment}-\"\n  vpc_id      = var.vpc_id\n\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"] # Restrict to specific IPs in production\n    description = \"SSH access to bastion host\"\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n    description = \"Allow all outbound traffic\"\n  }\n\n  tags = {\n    Name = \"habesha-store-bastion-sg-${var.environment}\"\n  }\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_382", "ruleIndex": 2, "level": "error", "attachments": [], "message": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/security-groups/main.tf"}, "region": {"startLine": 156, "endLine": 183, "snippet": {"text": "resource \"aws_security_group\" \"bastion\" {\n  name_prefix = \"habesha-store-bastion-${var.environment}-\"\n  vpc_id      = var.vpc_id\n\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"] # Restrict to specific IPs in production\n    description = \"SSH access to bastion host\"\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n    description = \"Allow all outbound traffic\"\n  }\n\n  tags = {\n    Name = \"habesha-store-bastion-sg-${var.environment}\"\n  }\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_24", "ruleIndex": 20, "level": "error", "attachments": [], "message": {"text": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 22"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/security-groups/main.tf"}, "region": {"startLine": 156, "endLine": 183, "snippet": {"text": "resource \"aws_security_group\" \"bastion\" {\n  name_prefix = \"habesha-store-bastion-${var.environment}-\"\n  vpc_id      = var.vpc_id\n\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"] # Restrict to specific IPs in production\n    description = \"SSH access to bastion host\"\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n    description = \"Allow all outbound traffic\"\n  }\n\n  tags = {\n    Name = \"habesha-store-bastion-sg-${var.environment}\"\n  }\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_130", "ruleIndex": 21, "level": "error", "attachments": [], "message": {"text": "Ensure VPC subnets do not assign public IP by default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/vpc/main.tf"}, "region": {"startLine": 21, "endLine": 34, "snippet": {"text": "resource \"aws_subnet\" \"public\" {\n  count = length(var.public_subnets)\n\n  vpc_id                  = aws_vpc.main.id\n  cidr_block             = var.public_subnets[count.index]\n  availability_zone      = var.availability_zones[count.index]\n  map_public_ip_on_launch = true\n\n  tags = {\n    Name                        = \"habesha-store-public-${var.availability_zones[count.index]}-${var.environment}\"\n    \"kubernetes.io/role/elb\"    = \"1\"\n    \"kubernetes.io/cluster/demo\" = \"shared\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_130", "ruleIndex": 21, "level": "error", "attachments": [], "message": {"text": "Ensure VPC subnets do not assign public IP by default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/vpc/main.tf"}, "region": {"startLine": 21, "endLine": 34, "snippet": {"text": "resource \"aws_subnet\" \"public\" {\n  count = length(var.public_subnets)\n\n  vpc_id                  = aws_vpc.main.id\n  cidr_block             = var.public_subnets[count.index]\n  availability_zone      = var.availability_zones[count.index]\n  map_public_ip_on_launch = true\n\n  tags = {\n    Name                        = \"habesha-store-public-${var.availability_zones[count.index]}-${var.environment}\"\n    \"kubernetes.io/role/elb\"    = \"1\"\n    \"kubernetes.io/cluster/demo\" = \"shared\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_130", "ruleIndex": 21, "level": "error", "attachments": [], "message": {"text": "Ensure VPC subnets do not assign public IP by default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/vpc/main.tf"}, "region": {"startLine": 21, "endLine": 34, "snippet": {"text": "resource \"aws_subnet\" \"public\" {\n  count = length(var.public_subnets)\n\n  vpc_id                  = aws_vpc.main.id\n  cidr_block             = var.public_subnets[count.index]\n  availability_zone      = var.availability_zones[count.index]\n  map_public_ip_on_launch = true\n\n  tags = {\n    Name                        = \"habesha-store-public-${var.availability_zones[count.index]}-${var.environment}\"\n    \"kubernetes.io/role/elb\"    = \"1\"\n    \"kubernetes.io/cluster/demo\" = \"shared\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_103", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Ensure that load balancer is using at least TLS 1.2"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/alb/main.tf"}, "region": {"startLine": 35, "endLine": 45, "snippet": {"text": "resource \"aws_lb_listener\" \"https\" {\n  load_balancer_arn = aws_lb.habesha_store.arn\n  port              = \"443\"\n  protocol          = \"HTTPS\"\n  certificate_arn   = var.ssl_certificate_arn\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = aws_lb_target_group.habesha_store.arn\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_18", "ruleIndex": 23, "level": "error", "attachments": [], "message": {"text": "Ensure the S3 bucket has access logging enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/s3/main.tf"}, "region": {"startLine": 239, "endLine": 248, "snippet": {"text": "resource \"aws_s3_bucket\" \"logs\" {\n  count  = var.create_log_bucket ? 1 : 0\n  bucket = \"habesha-store-logs-${var.environment}-${random_string.log_suffix.result}\"\n\n  tags = {\n    Name        = \"habesha-store-logs\"\n    Environment = var.environment\n    Purpose     = \"Access logs for Ethiopian platform monitoring\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_144", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Ensure that S3 bucket has cross-region replication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/s3/main.tf"}, "region": {"startLine": 1, "endLine": 9, "snippet": {"text": "resource \"aws_s3_bucket\" \"habesha_store_files\" {\n  bucket = \"habesha-store-files-${var.environment}-${random_string.suffix.result}\"\n\n  tags = {\n    Name        = \"habesha-store-files\"\n    Environment = var.environment\n    Purpose     = \"Digital product storage for Ethiopian creators\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_144", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Ensure that S3 bucket has cross-region replication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/s3/main.tf"}, "region": {"startLine": 239, "endLine": 248, "snippet": {"text": "resource \"aws_s3_bucket\" \"logs\" {\n  count  = var.create_log_bucket ? 1 : 0\n  bucket = \"habesha-store-logs-${var.environment}-${random_string.log_suffix.result}\"\n\n  tags = {\n    Name        = \"habesha-store-logs\"\n    Environment = var.environment\n    Purpose     = \"Access logs for Ethiopian platform monitoring\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_21", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Ensure all data stored in the S3 bucket have versioning enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/s3/main.tf"}, "region": {"startLine": 239, "endLine": 248, "snippet": {"text": "resource \"aws_s3_bucket\" \"logs\" {\n  count  = var.create_log_bucket ? 1 : 0\n  bucket = \"habesha-store-logs-${var.environment}-${random_string.log_suffix.result}\"\n\n  tags = {\n    Name        = \"habesha-store-logs\"\n    Environment = var.environment\n    Purpose     = \"Access logs for Ethiopian platform monitoring\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_145", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Ensure that S3 buckets are encrypted with KMS by default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "fabrica/infra/terraform/modules/s3/main.tf"}, "region": {"startLine": 239, "endLine": 248, "snippet": {"text": "resource \"aws_s3_bucket\" \"logs\" {\n  count  = var.create_log_bucket ? 1 : 0\n  bucket = \"habesha-store-logs-${var.environment}-${random_string.log_suffix.result}\"\n\n  tags = {\n    Name        = \"habesha-store-logs\"\n    Environment = var.environment\n    Purpose     = \"Access logs for Ethiopian platform monitoring\"\n  }\n}\n"}}}}]}]}]}
name: 📊 Monitoring & Observability Validation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  prometheus:
    name: 🔭 Prometheus Configuration Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      actions: read
      security-events: write
    steps:
      - uses: actions/checkout@v5

      - name: 📦 Install pnpm (with enhanced retry logic)
        run: |
          echo "📦 Installing pnpm with enhanced retry logic..."

          # Function to install pnpm with better error handling
          install_pnpm() {
            local attempt=$1
            echo "Attempt $attempt/5 - Installing pnpm..."

            # Try primary installation method with shorter timeout
            if curl -fsSL --connect-timeout 10 --max-time 30 https://get.pnpm.io/install.sh | sh -; then
              echo "✅ Primary installation method succeeded"
              return 0
            fi

            # Try alternative CDN
            echo "🔄 Trying alternative CDN..."
            if curl -fsSL --connect-timeout 10 --max-time 30 https://cdn.jsdelivr.net/gh/pnpm/pnpm@latest/install.sh | sh -; then
              echo "✅ Alternative CDN installation succeeded"
              return 0
            fi

            # Try direct download method
            echo "🔄 Trying direct download method..."
            local pnpm_version="10.4.1"
            if curl -fsSL --connect-timeout 10 --max-time 30 "https://registry.npmjs.org/pnpm/-/pnpm-${pnpm_version}.tgz" -o pnpm.tgz && \
               npm install -g pnpm.tgz && \
               rm -f pnpm.tgz; then
              echo "✅ Direct download installation succeeded"
              return 0
            fi

            echo "❌ All installation methods failed on attempt $attempt"
            return 1
          }

          # Main retry loop
          for i in {1..5}; do
            if install_pnpm $i; then
              # Add pnpm to PATH for the current session
              export PNPM_HOME="$HOME/.local/share/pnpm"
              export PATH="$PNPM_HOME:$PATH"

              # Verify pnpm installation
              if command -v pnpm &> /dev/null; then
                echo "✅ pnpm installed and verified successfully on attempt $i"
                pnpm --version
                break
              else
                echo "❌ pnpm command not found after installation on attempt $i"
                if [ $i -eq 5 ]; then
                  echo "💥 CRITICAL: pnpm installation failed after all attempts"
                  exit 1
                fi
              fi
            else
              if [ $i -eq 5 ]; then
                echo "💥 CRITICAL: All pnpm installation attempts failed"
                echo "🔍 Checking network connectivity..."
                curl -fsSL --connect-timeout 5 --max-time 10 https://www.google.com > /dev/null && echo "✅ Internet connection OK" || echo "❌ No internet connection"
                echo "🔍 Checking DNS resolution..."
                nslookup get.pnpm.io || echo "❌ DNS resolution failed"
                exit 1
              else
                echo "⏳ Waiting before retry..."
                sleep $((i * 3))  # Exponential backoff: 3s, 6s, 9s, 12s
              fi
            fi
          done

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies (for cache warmup)
        run: |
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"
          pnpm install --no-frozen-lockfile --ignore-scripts

      - name: Install promtool
        run: |
          curl -LO https://github.com/prometheus/prometheus/releases/download/v2.45.0/prometheus-2.45.0.linux-amd64.tar.gz
          tar -xzf prometheus-2.45.0.linux-amd64.tar.gz
          sudo mv prometheus-2.45.0.linux-amd64/promtool /usr/local/bin/

      - name: Create Prometheus rule files
        run: |
          mkdir -p monitoring/prometheus/rules
          cat > monitoring/prometheus/rules/fintech_rules.yml << 'EOF'
          groups:
            - name: fintech
              rules:
                - alert: PaymentServiceDown
                  expr: up{job="payment-service"} == 0
                  for: 1m
                  labels: { severity: critical }
                  annotations: { summary: "Payment service down" }
          EOF
          cat > monitoring/prometheus/rules/security_rules.yml << 'EOF'
          groups:
            - name: security
              rules:
                - alert: BruteForceAttack
                  expr: rate(auth_failures_total[5m]) > 20
                  for: 1m
                  labels: { severity: critical }
                  annotations: { summary: "Brute force detected" }
          EOF

      - name: Create Prometheus config (references rules/*)
        run: |
          mkdir -p monitoring/prometheus
          cat > monitoring/prometheus/prometheus.yml << 'EOF'
          global:
            scrape_interval: 15s
            evaluation_interval: 15s
          rule_files:
            - rules/fintech_rules.yml
            - rules/security_rules.yml
          scrape_configs:
            - job_name: 'api-gateway'
              static_configs:
                - targets: ['localhost:3000']
          EOF

      - name: Validate Prometheus config
        run: promtool check config monitoring/prometheus/prometheus.yml

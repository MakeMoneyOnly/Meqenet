name: ‚ö° Performance Testing & Load Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: "22"
  PNPM_VERSION: "10.4.1"
  CI: true
  HUSKY: 0
  HUSKY_SKIP_INSTALL: 1

permissions:
  contents: read

jobs:
  api-performance:
    name: üî• API Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v5

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: "https://registry.npmjs.org"

      - name: üì¶ Enable Corepack
        run: |
          echo "üì¶ Installing pnpm with retry logic..."
          for i in {1..3}; do
          # Use the official pnpm installation script
          curl -fsSL --connect-timeout 10 --max-time 30 https://get.pnpm.io/install.sh | sh -

          # Add pnpm to PATH for the current session
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"

          # Verify pnpm installation
          if command -v pnpm &> /dev/null; then
              echo "‚úÖ pnpm installed successfully on attempt $i"
              break
            else
              echo "‚ùå pnpm installation failed on attempt $i"
              if [ $i -eq 3 ]; then
                echo "üîÑ Falling back to direct download..."
                curl -fsSL --connect-timeout 10 --max-time 30 https://get.pnpm.io/install.sh | PNPM_VERSION=${{ env.PNPM_VERSION }} sh -
                break
              fi
              sleep 2
            fi
          done

          # Verify pnpm installation
          pnpm --version

      - name: üìö Install Dependencies
        run: |
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"
          pnpm config set registry https://registry.npmjs.org/
          # Configure npm registry with retry and auth handling
          echo "üì¶ Configuring npm registry..."

          # Clear any existing npm registry configuration that might be cached
          pnpm config delete registry || true
          pnpm config delete //registry.npmjs.org/:_authToken || true

          pnpm config set registry https://registry.npmjs.org/

          # Configure retry settings for rate limiting
          pnpm config set fetch-retry-mintimeout 20000
          pnpm config set fetch-retry-maxtimeout 120000
          pnpm config set fetch-timeout 60000

          # Set auth token if available and valid
          if [ -n "${{ secrets.NPM_TOKEN }}" ] && [ "${{ secrets.NPM_TOKEN }}" != "XXXX[hidden]" ]; then
            echo "üîê Testing NPM token validity..."
            if npm whoami --registry=https://registry.npmjs.org/ >/dev/null 2>&1; then
              pnpm config set //registry.npmjs.org/:_authToken "${{ secrets.NPM_TOKEN }}"
              echo "‚úÖ NPM authentication configured and validated"
            else
              echo "‚ö†Ô∏è  NPM_TOKEN is invalid or expired, using public registry"
            fi
          else
            echo "‚ö†Ô∏è  No valid NPM_TOKEN provided, using public registry"
          fi

          # Install dependencies with retry logic
          echo "üì¶ Installing dependencies..."
          for attempt in {1..3}; do
            if pnpm install --no-frozen-lockfile --ignore-scripts; then
              echo "‚úÖ Dependencies installed successfully"
              break
            else
              echo "‚ùå Installation failed on attempt $attempt"
              if [ $attempt -eq 3 ]; then
                echo "üí• CRITICAL: All dependency installation attempts failed"
                exit 1
              fi
              echo "‚è≥ Waiting before retry..."
              sleep 5
            fi
          done

      - name: üöÄ Run API Performance Tests (k6)
        run: |
          if [ -f "scripts/performance/api.k6.js" ]; then
            docker run --rm -i -v ${{ github.workspace }}:/work -w /work grafana/k6 run scripts/performance/api.k6.js
          else
            echo "No k6 script found at scripts/performance/api.k6.js. Skipping." 
          fi

  mobile-performance:
    name: üì± Mobile Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v5

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: "https://registry.npmjs.org"

      - name: üì¶ Enable Corepack
        run: |
          echo "üì¶ Installing pnpm with retry logic..."
          for i in {1..3}; do
          # Use the official pnpm installation script
          curl -fsSL --connect-timeout 10 --max-time 30 https://get.pnpm.io/install.sh | sh -

          # Add pnpm to PATH for the current session
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"

          # Verify pnpm installation
          if command -v pnpm &> /dev/null; then
              echo "‚úÖ pnpm installed successfully on attempt $i"
              break
            else
              echo "‚ùå pnpm installation failed on attempt $i"
              if [ $i -eq 3 ]; then
                echo "üîÑ Falling back to direct download..."
                curl -fsSL --connect-timeout 10 --max-time 30 https://get.pnpm.io/install.sh | PNPM_VERSION=${{ env.PNPM_VERSION }} sh -
                break
              fi
              sleep 2
            fi
          done

          # Verify pnpm installation
          pnpm --version

      - name: üìö Install Dependencies
        run: |
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"
          pnpm config set registry https://registry.npmjs.org/
          # Configure npm registry with retry and auth handling
          echo "üì¶ Configuring npm registry..."

          # Clear any existing npm registry configuration that might be cached
          pnpm config delete registry || true
          pnpm config delete //registry.npmjs.org/:_authToken || true

          pnpm config set registry https://registry.npmjs.org/

          # Configure retry settings for rate limiting
          pnpm config set fetch-retry-mintimeout 20000
          pnpm config set fetch-retry-maxtimeout 120000
          pnpm config set fetch-timeout 60000

          # Set auth token if available and valid
          if [ -n "${{ secrets.NPM_TOKEN }}" ] && [ "${{ secrets.NPM_TOKEN }}" != "XXXX[hidden]" ]; then
            echo "üîê Testing NPM token validity..."
            if npm whoami --registry=https://registry.npmjs.org/ >/dev/null 2>&1; then
              pnpm config set //registry.npmjs.org/:_authToken "${{ secrets.NPM_TOKEN }}"
              echo "‚úÖ NPM authentication configured and validated"
            else
              echo "‚ö†Ô∏è  NPM_TOKEN is invalid or expired, using public registry"
            fi
          else
            echo "‚ö†Ô∏è  No valid NPM_TOKEN provided, using public registry"
          fi

          # Install dependencies with retry logic
          echo "üì¶ Installing dependencies..."
          for attempt in {1..3}; do
            if pnpm install --no-frozen-lockfile --ignore-scripts; then
              echo "‚úÖ Dependencies installed successfully"
              break
            else
              echo "‚ùå Installation failed on attempt $attempt"
              if [ $attempt -eq 3 ]; then
                echo "üí• CRITICAL: All dependency installation attempts failed"
                exit 1
              fi
              echo "‚è≥ Waiting before retry..."
              sleep 5
            fi
          done

      - name: üöÄ Run Mobile Perf Tests (placeholder)
        run: |
          echo "Add real mobile perf scripts under scripts/performance/mobile/*.js to activate."
          echo "Skipping for now."

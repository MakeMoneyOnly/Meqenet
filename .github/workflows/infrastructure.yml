name: üèóÔ∏è Infrastructure Validation & Security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write  # Required for SARIF upload

jobs:
  terraform-security:
    name: üîí Terraform Security Validation
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: "https://registry.npmjs.org"

      - name: üì¶ Setup pnpm via Corepack (pinned)
        run: |
          set -euo pipefail
          echo "üì¶ Enabling Corepack and activating pnpm 10.4.1"
          corepack enable
          corepack prepare pnpm@10.4.1 --activate

          # Export PNPM_HOME and add to PATH for all subsequent steps
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"
          echo "PNPM_HOME=$PNPM_HOME" >> $GITHUB_ENV
          echo "PATH=$PATH" >> $GITHUB_ENV

          pnpm --version
          pnpm config set registry https://registry.npmjs.org/
          pnpm config set fetch-timeout 60000
          pnpm config set network-timeout 300000
          pnpm config delete @jsr:registry 2>/dev/null || true
          pnpm config delete //npm.jsr.io/:_authToken 2>/dev/null || true
          echo "‚úÖ pnpm configured via Corepack"

      - name: üìö Install Dependencies
        run: |
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"

          pnpm config delete registry || true
          pnpm config delete //registry.npmjs.org/:_authToken || true
          pnpm config delete @jsr:registry || true
          pnpm config delete //npm.jsr.io/:_authToken || true

          pnpm config set registry https://registry.npmjs.org/
          pnpm config set fetch-retry-mintimeout 20000
          pnpm config set fetch-retry-maxtimeout 120000
          pnpm config set fetch-timeout 60000

          for attempt in {1..3}; do
            if pnpm install --no-frozen-lockfile --ignore-scripts; then
              echo "‚úÖ Dependencies installed successfully"
              break
            else
              echo "‚ùå Installation failed on attempt $attempt"
              if [ $attempt -eq 3 ]; then
                echo "‚ùå All dependency installation attempts failed"
                exit 1
              fi
              sleep 5
            fi
          done

      - name: üîê Check NPM Token
        id: npm_token_check
        run: |
          # Use environment variable to check token without direct access
          if [ -n "${NPM_TOKEN:-}" ] && [ "${NPM_TOKEN:-}" != "XXXX[hidden]" ]; then
            echo "token_valid=true" >> $GITHUB_OUTPUT
          else
            echo "token_valid=false" >> $GITHUB_OUTPUT
          fi

      - name: üîê Setup NPM Authentication
        if: steps.npm_token_check.outputs.token_valid == 'true'
        run: |
          echo "üîê Setting up NPM authentication..."

      - name: üîê Configure NPM Registry
        if: steps.npm_token_check.outputs.token_valid == 'true'
        run: |
          pnpm config set //registry.npmjs.org/:_authToken "$NPM_TOKEN"
          echo "‚úÖ NPM authentication configured"

      - name: ‚ö†Ô∏è Configure Public Registry
        if: steps.npm_token_check.outputs.token_valid == 'false'
        run: |
          echo "‚ö†Ô∏è NPM_TOKEN is invalid or not set, using public registry with extended timeouts"
          pnpm config set fetch-retry-mintimeout 30000
          pnpm config set fetch-retry-maxtimeout 180000
          pnpm config set fetch-timeout 90000

      - uses: hashicorp/setup-terraform@v3

      - name: Pre-flight Terraform Validation
        run: |
          echo "üîç FinTech DevOps - Pre-flight Terraform Validation"
          cd infrastructure

          # Validate Terraform syntax
          echo "üìã Running terraform validate..."
          if terraform validate; then
            echo "‚úÖ Terraform validation passed"
          else
            echo "‚ùå Terraform validation failed - this may cause Checkov to fail"
            exit 1
          fi

          # Check for any obvious issues that could break Checkov
          echo "üîß Checking for potential Checkov blockers..."
          if find . -name "*.tf" -exec grep -l "invalid_syntax\|broken_reference" {} \; | grep -q .; then
            echo "‚ö†Ô∏è Found potentially problematic Terraform files"
            find . -name "*.tf" -exec grep -l "invalid_syntax\|broken_reference" {} \;
          else
            echo "‚úÖ No obvious syntax issues detected"
          fi

      - name: Verify Terraform files exist
        run: |
          echo "üîç Checking for Terraform files in infrastructure directory..."
          TERRAFORM_FILES=$(find infrastructure -name "*.tf" -type f | wc -l)
          echo "Found $TERRAFORM_FILES Terraform files"

          if [ "$TERRAFORM_FILES" -gt 0 ]; then
            echo "‚úÖ Terraform files found:"
            find infrastructure -name "*.tf" -type f -exec basename {} \;
          else
            echo "‚ùå No Terraform files found in infrastructure directory"
            echo "This could cause Checkov to fail"
            exit 1
          fi

      - name: Terraform fmt check
        run: |
          if [ -d terraform ]; then
            terraform fmt -check -diff terraform/
          else
            echo "No terraform dir; skipping."
          fi
      # Trivy now includes tfsec functionality for Terraform scanning
      - name: Run Trivy for Terraform Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "config"
          scan-ref: "infrastructure/"
          format: "sarif"
          output: "trivy-terraform-results.sarif"
          severity: "CRITICAL,HIGH,MEDIUM"
          exit-code: "0" # Don't fail the build, just report
      - name: checkov
        id: checkov
        uses: bridgecrewio/checkov-action@v12.1347.0
        continue-on-error: true
        with:
          directory: infrastructure/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-terraform.sarif
          soft_fail: true
          quiet: false
          check: CKV_AWS_*,CKV2_AWS_*
          skip_check: CKV_AWS_144  # Skip ELB logging check if not using classic ELB
          # Enhanced error handling and debugging
          log_level: INFO
          compact: false

      - name: Fix Checkov SARIF output path
        if: always()
        run: |
          set -euo pipefail
          echo "üîß FinTech DevOps - Checking Checkov SARIF output structure..."

          # Checkov creates a directory structure, but our workflow expects a flat file
          if [ -d "checkov-terraform.sarif" ]; then
            echo "üìÅ Found Checkov SARIF directory: checkov-terraform.sarif"

            if [ -f "checkov-terraform.sarif/results_sarif.sarif" ]; then
              echo "üîÑ Moving SARIF file from directory structure to flat file..."
              mv checkov-terraform.sarif/results_sarif.sarif checkov-terraform.sarif.tmp
              rm -rf checkov-terraform.sarif
              mv checkov-terraform.sarif.tmp checkov-terraform.sarif
              echo "‚úÖ SARIF file path fixed successfully"

              # Validate the moved file
              if [ -f "checkov-terraform.sarif" ] && [ -s "checkov-terraform.sarif" ]; then
                echo "‚úÖ SARIF file exists and has content ($(wc -c < checkov-terraform.sarif) bytes)"
              else
                echo "‚ùå SARIF file move failed - file is empty or missing"
                exit 1
              fi
            else
              echo "‚ùå Expected SARIF file not found in directory: checkov-terraform.sarif/results_sarif.sarif"
              ls -la checkov-terraform.sarif/ || echo "Directory listing failed"
              exit 1
            fi
          elif [ -f "checkov-terraform.sarif" ]; then
            echo "‚úÖ SARIF file already exists as flat file"
            ls -la checkov-terraform.sarif
          else
            echo "‚ùå No SARIF output found from Checkov"
            echo "üìã Checking for any SARIF files in workspace..."
            find . -name "*.sarif" -type f 2>/dev/null || echo "No SARIF files found"
            exit 1
          fi

      - name: Debug Checkov output
        if: always()
        run: |
          echo "üîç FinTech DevOps - Checkov Execution Analysis"
          echo "==============================================="
          echo "Checkov exit code: ${{ steps.checkov.outcome }}"
          echo "Checkov conclusion: ${{ steps.checkov.conclusion }}"
          echo "Repository: ${{ github.repository }}"
          echo "Commit: ${{ github.sha }}"
          echo "==============================================="

          echo "üìÅ Infrastructure Directory Contents..."
          ls -la infrastructure/

          echo "üîç Checking Checkov SARIF file generation..."
          if [ -f "checkov-terraform.sarif" ]; then
            echo "‚úÖ Checkov SARIF file found!"
            ls -la checkov-terraform.sarif
            echo "üìä File size:"
            wc -c checkov-terraform.sarif

            # Validate SARIF structure for FinTech compliance
            if jq -e '.runs[0].results' checkov-terraform.sarif > /dev/null 2>&1; then
              echo "‚úÖ SARIF file has valid JSON structure"
              RESULT_COUNT=$(jq '.runs[0].results | length' checkov-terraform.sarif 2>/dev/null || echo "0")
              echo "üìä Security findings detected: $RESULT_COUNT"

              # Check for critical financial security issues
              CRITICAL_COUNT=$(jq '[.runs[0].results[] | select(.level == "error" or (.properties.severity == "CRITICAL"))] | length' checkov-terraform.sarif 2>/dev/null || echo "0")
              HIGH_COUNT=$(jq '[.runs[0].results[] | select(.properties.severity == "HIGH")] | length' checkov-terraform.sarif 2>/dev/null || echo "0")

              echo "üö® Critical security issues: $CRITICAL_COUNT"
              echo "‚ö†Ô∏è High severity issues: $HIGH_COUNT"

              if [ "$CRITICAL_COUNT" -gt 0 ]; then
                echo "‚ùå NBE Compliance: FAILED - Critical security issues found"
                echo "üîß Action Required: Review findings in Security tab"
              else
                echo "‚úÖ NBE Compliance: PASSED - No critical issues"
              fi
            else
              echo "‚ö†Ô∏è SARIF file exists but has invalid JSON structure"
            fi
          else
            echo "‚ùå Checkov SARIF file not found"
            echo "üìã Checking for any SARIF files in workspace..."
            find . -name "*.sarif" -type f 2>/dev/null || echo "No SARIF files found"

            echo "üîç Checking Checkov logs for errors..."
            echo "Possible causes:"
            echo "  - Checkov failed to execute"
            echo "  - No Terraform files found in infrastructure/"
            echo "  - AWS credentials/configuration issue"
            echo "  - Network connectivity issue"
          fi

      - name: Upload Terraform Security SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: trivy-terraform-results.sarif
          category: "terraform-security"

      - name: Verify Terraform SARIF upload success
        if: always()
        run: |
          echo "üîç Checking if Terraform SARIF file was created..."
          if [ -f "trivy-terraform-results.sarif" ]; then
            echo "‚úÖ Terraform SARIF file exists"
            ls -la trivy-terraform-results.sarif
            echo "üìä SARIF file size:"
            wc -c trivy-terraform-results.sarif
          else
            echo "‚ùå Terraform SARIF file not found"
            exit 1
          fi

      - name: Check SARIF file existence
        id: check_sarif
        if: always()
        run: |
          if [ -f "checkov-terraform.sarif" ] && [ -s "checkov-terraform.sarif" ]; then
            echo "sarif_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Checkov SARIF file ready for upload"
          else
            echo "sarif_exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Checkov SARIF file not found or empty, skipping upload"
          fi

      - name: Upload Checkov SARIF
        if: always() && steps.check_sarif.outputs.sarif_exists == 'true'
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: checkov-terraform.sarif
          category: "checkov-terraform"

      - name: Verify Checkov SARIF upload success
        if: always()
        run: |
          echo "üîç FinTech DevOps - Checkov SARIF Validation"
          echo "=========================================="
          echo "Validating SARIF file generation and upload..."
          echo "Repository: ${{ github.repository }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Checkov step outcome: ${{ steps.checkov.outcome }}"
          echo "Checkov step conclusion: ${{ steps.checkov.conclusion }}"
          echo "=========================================="

          # Enhanced error diagnostics
          if [ "${{ steps.checkov.outcome }}" = "failure" ]; then
            echo "‚ùå Checkov step failed - performing detailed diagnostics..."
            echo ""

            # Check system resources
            echo "üìä System Diagnostics:"
            echo "  - Available disk space: $(df -h . | tail -1 | awk '{print $4}')"
            echo "  - Memory usage: $(free -h | grep '^Mem:' | awk '{print $3 "/" $2}')"
            echo ""

            # Check Terraform files
            echo "üîß Terraform File Analysis:"
            TERRAFORM_COUNT=$(find infrastructure -name "*.tf" -type f | wc -l)
            echo "  - Terraform files found: $TERRAFORM_COUNT"
            if [ "$TERRAFORM_COUNT" -gt 0 ]; then
              echo "  - Files:"
              find infrastructure -name "*.tf" -type f -exec basename {} \; | sed 's/^/    - /'
            fi
            echo ""

            # Check for SARIF file
            if [ -f "checkov-terraform.sarif" ]; then
              echo "‚úÖ SARIF file exists despite Checkov failure"
              echo "  - File size: $(wc -c < checkov-terraform.sarif) bytes"
              echo "  - Proceeding with validation..."
            else
              echo "‚ùå No SARIF file found - Checkov failed to generate output"
              echo ""
              echo "üîç Possible causes:"
              echo "  - Checkov installation/network issues"
              echo "  - Invalid Terraform syntax (run 'terraform validate')"
              echo "  - AWS credential problems"
              echo "  - Action version incompatibility"
              echo "  - Memory/disk space constraints"
              echo "  - Python dependencies missing"
              exit 1
            fi
          else
            echo "‚úÖ Checkov step completed successfully"
          fi

          if [ -f "checkov-terraform.sarif" ]; then
            echo "‚úÖ Checkov SARIF file exists"
            ls -la checkov-terraform.sarif

            # Check if SARIF file has content (not empty)
            if [ -s "checkov-terraform.sarif" ]; then
              echo "‚úÖ SARIF file has content"

              # Validate JSON structure
              if jq empty checkov-terraform.sarif 2>/dev/null; then
                echo "‚úÖ SARIF file contains valid JSON"

                # Extract key metrics for FinTech compliance
                TOTAL_RULES=$(jq '.runs[0].tool.driver.rules | length' checkov-terraform.sarif 2>/dev/null || echo "0")
                TOTAL_RESULTS=$(jq '.runs[0].results | length' checkov-terraform.sarif 2>/dev/null || echo "0")

                echo "üìä Scan Metrics:"
                echo "  - Security rules checked: $TOTAL_RULES"
                echo "  - Security findings: $TOTAL_RESULTS"

                # NBE Compliance Assessment
                CRITICAL_ISSUES=$(jq '[.runs[0].results[] | select(.level == "error")] | length' checkov-terraform.sarif 2>/dev/null || echo "0")
                HIGH_ISSUES=$(jq '[.runs[0].results[] | select(.properties.severity == "HIGH")] | length' checkov-terraform.sarif 2>/dev/null || echo "0")

                if [ "$CRITICAL_ISSUES" -eq 0 ]; then
                  echo "‚úÖ NBE Compliance: PASSED (No critical security violations)"
                else
                  echo "‚ùå NBE Compliance: FAILED ($CRITICAL_ISSUES critical violations)"
                  echo "üö® Action Required: Address critical security issues immediately"
                fi

                if [ "$HIGH_ISSUES" -gt 0 ]; then
                  echo "‚ö†Ô∏è High Priority: $HIGH_ISSUES high-severity issues require attention"
                fi

              else
                echo "‚ùå SARIF file contains invalid JSON"
                echo "This indicates Checkov may not have completed successfully"
                exit 1
              fi
            else
              echo "‚ö†Ô∏è SARIF file exists but is empty (no security findings detected)"
              echo "This could mean:"
              echo "  - No Terraform files were found to scan"
              echo "  - All checks passed (no violations found)"
              echo "  - Checkov configuration issue"
            fi
          else
            echo "‚ùå Checkov SARIF file not found"
            echo "üîç Troubleshooting Checkov execution..."
            echo ""
            echo "Possible causes:"
            echo "  - Checkov action failed to execute"
            echo "  - No Terraform files found in infrastructure/ directory"
            echo "  - AWS credential/configuration issue"
            echo "  - Network connectivity problem"
            echo "  - Checkov action version incompatibility"
            echo ""
            echo "Check the debug output above for more details"
            echo "Verify Terraform files exist: ls -la infrastructure/"
            exit 1
          fi

          echo "=========================================="
          echo "‚úÖ FinTech Infrastructure Security Scan Complete"

name: üèóÔ∏è Infrastructure Validation & Security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  terraform-security:
    name: üîí Terraform Security Validation
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: "https://registry.npmjs.org"

      - name: üì¶ Setup pnpm via Corepack (pinned)
        run: |
          set -euo pipefail
          echo "üì¶ Enabling Corepack and activating pnpm 10.4.1"
          corepack enable
          corepack prepare pnpm@10.4.1 --activate
          pnpm --version
          pnpm config set registry https://registry.npmjs.org/
          pnpm config set fetch-timeout 60000
          pnpm config set network-timeout 300000
          pnpm config delete @jsr:registry 2>/dev/null || true
          pnpm config delete //npm.jsr.io/:_authToken 2>/dev/null || true
          echo "‚úÖ pnpm configured via Corepack"

      - name: üìö Install Dependencies
        run: |
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"

          pnpm config delete registry || true
          pnpm config delete //registry.npmjs.org/:_authToken || true
          pnpm config delete @jsr:registry || true
          pnpm config delete //npm.jsr.io/:_authToken || true

          pnpm config set registry https://registry.npmjs.org/
          pnpm config set fetch-retry-mintimeout 20000
          pnpm config set fetch-retry-maxtimeout 120000
          pnpm config set fetch-timeout 60000

          if [ -n "${{ secrets.NPM_TOKEN }}" ] && [ "${{ secrets.NPM_TOKEN }}" != "XXXX[hidden]" ] && [ "${{ secrets.NPM_TOKEN }}" != "" ]; then
            pnpm config set //registry.npmjs.org/:_authToken "${{ secrets.NPM_TOKEN }}"
          else
            pnpm config set fetch-retry-mintimeout 30000
            pnpm config set fetch-retry-maxtimeout 180000
            pnpm config set fetch-timeout 90000
          fi

          for attempt in {1..3}; do
            if pnpm install --no-frozen-lockfile --ignore-scripts; then
              echo "‚úÖ Dependencies installed successfully"
              break
            else
              echo "‚ùå Installation failed on attempt $attempt"
              if [ $attempt -eq 3 ]; then
                echo "‚ùå All dependency installation attempts failed"
                exit 1
              fi
              sleep 5
            fi
          done

      - uses: hashicorp/setup-terraform@v3
      - name: Terraform fmt check
        run: |
          if [ -d terraform ]; then
            terraform fmt -check -diff terraform/
          else
            echo "No terraform dir; skipping."
          fi
      # Trivy now includes tfsec functionality for Terraform scanning
      - name: Run Trivy for Terraform Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "config"
          scan-ref: "infrastructure/"
          format: "sarif"
          output: "trivy-terraform-results.sarif"
          severity: "CRITICAL,HIGH,MEDIUM"
          exit-code: "0" # Don't fail the build, just report
      - name: checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: infrastructure/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-terraform.sarif
          soft_fail: false
      - name: Upload Terraform Security SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-terraform-results.sarif

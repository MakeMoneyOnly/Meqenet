name: üèóÔ∏è Infrastructure Validation & Security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  terraform-security:
    name: üîí Terraform Security Validation
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: "https://registry.npmjs.org"

      - name: üì¶ Install pnpm
        run: |
          PNPM_INSTALLED=false

          # Try installation methods silently
          if curl -fsSL --connect-timeout 15 --max-time 60 https://get.pnpm.io/install.sh | sh -; then
            export PNPM_HOME="$HOME/.local/share/pnpm"
            export PATH="$PNPM_HOME:$PATH"
            if command -v pnpm &> /dev/null; then
              PNPM_INSTALLED=true
            fi
          fi

          if [ "$PNPM_INSTALLED" = false ]; then
            if curl -fsSL --connect-timeout 15 --max-time 60 https://cdn.jsdelivr.net/gh/pnpm/pnpm@latest/install.sh | sh -; then
              export PNPM_HOME="$HOME/.local/share/pnpm"
              export PATH="$PNPM_HOME:$PATH"
              if command -v pnpm &> /dev/null; then
                PNPM_INSTALLED=true
              fi
            fi
          fi

          if [ "$PNPM_INSTALLED" = false ]; then
            if curl -fsSL --connect-timeout 15 --max-time 60 https://raw.githubusercontent.com/pnpm/pnpm/master/install.sh | sh -; then
              export PNPM_HOME="$HOME/.local/share/pnpm"
              export PATH="$PNPM_HOME:$PATH"
              if command -v pnpm &> /dev/null; then
                PNPM_INSTALLED=true
              fi
            fi
          fi

          if [ "$PNPM_INSTALLED" = false ]; then
            curl -fsSL --connect-timeout 15 --max-time 60 -o /tmp/pnpm.tar.gz https://github.com/pnpm/pnpm/releases/latest/download/pnpm-linux-x64.tar.gz
            if [ $? -eq 0 ] && [ -f /tmp/pnpm.tar.gz ]; then
              mkdir -p $HOME/.local/bin
              tar -xzf /tmp/pnpm.tar.gz -C $HOME/.local/bin --strip-components=1
              export PATH="$HOME/.local/bin:$PATH"
              if command -v pnpm &> /dev/null; then
                PNPM_INSTALLED=true
              fi
            fi
          fi

          if [ "$PNPM_INSTALLED" = false ]; then
            if npm install -g pnpm; then
              export PATH="$(npm config get prefix)/bin:$PATH"
              if command -v pnpm &> /dev/null; then
                PNPM_INSTALLED=true
              fi
            fi
          fi

          if [ "$PNPM_INSTALLED" = false ]; then
            if command -v pnpm &> /dev/null; then
              PNPM_INSTALLED=true
            else
              mkdir -p $HOME/.local/bin
              cat > $HOME/.local/bin/pnpm << 'EOF'
          #!/bin/bash
          case "$1" in
            "--version"|"-v")
              echo "pnpm wrapper 1.0.0"
              ;;
            "install")
              shift
              npm install "$@"
              ;;
            *)
              echo "pnpm command '$1' not supported in wrapper mode"
              exit 1
              ;;
          esac
          EOF
              chmod +x $HOME/.local/bin/pnpm
              export PATH="$HOME/.local/bin:$PATH"
              if command -v pnpm &> /dev/null; then
                PNPM_INSTALLED=true
              fi
            fi
          fi

          if [ "$PNPM_INSTALLED" = true ]; then
            pnpm config set registry https://registry.npmjs.org/
            pnpm config set fetch-timeout 60000
            pnpm config set network-timeout 300000
            corepack enable
            pnpm config delete @jsr:registry 2>/dev/null || true
            pnpm config delete //npm.jsr.io/:_authToken 2>/dev/null || true
            echo "‚úÖ pnpm installed successfully"
          else
            echo "‚ùå Failed to install pnpm"
            exit 1
          fi

      - name: üìö Install Dependencies
        run: |
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"

          pnpm config delete registry || true
          pnpm config delete //registry.npmjs.org/:_authToken || true
          pnpm config delete @jsr:registry || true
          pnpm config delete //npm.jsr.io/:_authToken || true

          pnpm config set registry https://registry.npmjs.org/
          pnpm config set fetch-retry-mintimeout 20000
          pnpm config set fetch-retry-maxtimeout 120000
          pnpm config set fetch-timeout 60000

          if [ -n "${{ secrets.NPM_TOKEN }}" ] && [ "${{ secrets.NPM_TOKEN }}" != "XXXX[hidden]" ] && [ "${{ secrets.NPM_TOKEN }}" != "" ]; then
            pnpm config set //registry.npmjs.org/:_authToken "${{ secrets.NPM_TOKEN }}"
          else
            pnpm config set fetch-retry-mintimeout 30000
            pnpm config set fetch-retry-maxtimeout 180000
            pnpm config set fetch-timeout 90000
          fi

          for attempt in {1..3}; do
            if pnpm install --no-frozen-lockfile --ignore-scripts; then
              echo "‚úÖ Dependencies installed successfully"
              break
            else
              echo "‚ùå Installation failed on attempt $attempt"
              if [ $attempt -eq 3 ]; then
                echo "‚ùå All dependency installation attempts failed"
                exit 1
              fi
              sleep 5
            fi
          done

      - uses: hashicorp/setup-terraform@v3
      - name: Terraform fmt check
        run: |
          if [ -d terraform ]; then
            terraform fmt -check -diff terraform/
          else
            echo "No terraform dir; skipping."
          fi
      # Trivy now includes tfsec functionality for Terraform scanning
      - name: Run Trivy for Terraform Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'infrastructure/'
          format: 'sarif'
          output: 'trivy-terraform-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'  # Don't fail the build, just report
      - name: checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: infrastructure/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-terraform.sarif
          soft_fail: false
      - name: Upload Terraform Security SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-terraform-results.sarif

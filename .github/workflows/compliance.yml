name: üè¶ Compliance Validation Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: "22"
  PNPM_VERSION: "10.4.1"

permissions:
  contents: read

jobs:
  pci-dss:
    name: üí≥ PCI-DSS Level 1 Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v5
      - name: üì¶ Install pnpm (with retry logic)
        run: |
          echo "üì¶ Installing pnpm..."
          # Use the official pnpm installation script
          curl -fsSL https://get.pnpm.io/install.sh | sh -

          # Add pnpm to PATH for the current session
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"

          # Verify pnpm installation
          if command -v pnpm &> /dev/null; then
            echo "‚úÖ pnpm installed successfully"
            pnpm --version
          else
            echo "‚ùå pnpm installation failed"
            exit 1
          fi

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
        run: |
          echo "üì¶ Installing pnpm..."
          # Use the official pnpm installation script
          curl -fsSL https://get.pnpm.io/install.sh | sh -

          # Add pnpm to PATH for the current session
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"

          # Verify pnpm installation
          if command -v pnpm &> /dev/null; then
            echo "‚úÖ pnpm installed successfully"
            pnpm --version
          else
            echo "‚ùå pnpm installation failed"
            exit 1
          fi
      - run: pnpm install --no-frozen-lockfile
      - name: Run PCI Checks
        run: |
          echo "Validating encryption, key rotation, and network isolation policies..."
          echo "‚úÖ PCI-DSS checks placeholder (extend with concrete tests)."

  sox:
    name: üßæ SOX IT General Controls
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v5
      - name: üì¶ Install pnpm (with retry logic)
        run: |
          echo "üì¶ Installing pnpm..."
          # Use the official pnpm installation script
          curl -fsSL https://get.pnpm.io/install.sh | sh -

          # Add pnpm to PATH for the current session
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"

          # Verify pnpm installation
          if command -v pnpm &> /dev/null; then
            echo "‚úÖ pnpm installed successfully"
            pnpm --version
          else
            echo "‚ùå pnpm installation failed"
            exit 1
          fi

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
        run: |
          echo "üì¶ Installing pnpm..."
          # Use the official pnpm installation script
          curl -fsSL https://get.pnpm.io/install.sh | sh -

          # Add pnpm to PATH for the current session
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"

          # Verify pnpm installation
          if command -v pnpm &> /dev/null; then
            echo "‚úÖ pnpm installed successfully"
            pnpm --version
          else
            echo "‚ùå pnpm installation failed"
            exit 1
          fi
      - run: pnpm install --no-frozen-lockfile
      - name: Run SOX Checks
        run: echo "‚úÖ SOX controls placeholder (change management, access reviews)."

  iso27001:
    name: üîê ISO 27001 Controls
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v5
      - name: üì¶ Install pnpm (with retry logic)
        run: |
          echo "üì¶ Installing pnpm..."
          # Use the official pnpm installation script
          curl -fsSL https://get.pnpm.io/install.sh | sh -

          # Add pnpm to PATH for the current session
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"

          # Verify pnpm installation
          if command -v pnpm &> /dev/null; then
            echo "‚úÖ pnpm installed successfully"
            pnpm --version
          else
            echo "‚ùå pnpm installation failed"
            exit 1
          fi

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
        run: |
          echo "üì¶ Installing pnpm..."
          # Use the official pnpm installation script
          curl -fsSL https://get.pnpm.io/install.sh | sh -

          # Add pnpm to PATH for the current session
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"

          # Verify pnpm installation
          if command -v pnpm &> /dev/null; then
            echo "‚úÖ pnpm installed successfully"
            pnpm --version
          else
            echo "‚ùå pnpm installation failed"
            exit 1
          fi
      - run: pnpm install --no-frozen-lockfile
      - name: Run ISO 27001 Checks
        run: echo "‚úÖ ISO 27001 controls placeholder (risk assessment, logs)."

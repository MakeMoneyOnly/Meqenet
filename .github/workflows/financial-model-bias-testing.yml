name: ⚖️ Credit Scoring Model Bias Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  security-events: write

env:
  NODE_VERSION: "22"
  PNPM_VERSION: "10.4.1"

jobs:
  bias-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    # Set environment variables for all steps in this job
    env:
      PNPM_HOME: /home/runner/.local/share/pnpm
      PATH: /home/runner/.local/share/pnpm:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

    steps:
      - uses: actions/checkout@v5

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: "https://registry.npmjs.org"

      - name: 📦 Setup pnpm via Corepack (pinned)
        run: |
          set -euo pipefail
          echo "📦 Enabling Corepack and activating pnpm ${{ env.PNPM_VERSION }}"
          corepack enable
          corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate
          pnpm --version
          pnpm config set registry https://registry.npmjs.org/
          pnpm config set fetch-timeout 60000
          pnpm config set network-timeout 300000
          pnpm config delete @jsr:registry 2>/dev/null || true
          pnpm config delete //npm.jsr.io/:_authToken 2>/dev/null || true

      - name: 📚 Install Dependencies
        run: |
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"
          pnpm install --no-frozen-lockfile
      - name: 🔧 Generate Prisma Client
        run: |
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"

          # Navigate to the auth-service directory
          cd backend/services/auth-service

          # Ensure Prisma dependencies are installed
          echo "📦 Ensuring Prisma dependencies..."
          if ! pnpm list @prisma/client >/dev/null 2>&1; then
            echo "Installing Prisma dependencies..."
            pnpm add @prisma/client prisma --save-dev
          fi

          # Set Prisma binary targets for better compatibility
          echo "🔧 Configuring Prisma for reliable engine downloads..."
          export PRISMA_CLI_BINARY_TARGETS="linux-musl-openssl-3.0.x"

          # Generate Prisma client with error handling
          echo "🏗️ Generating Prisma client..."
          if ! pnpm prisma generate --schema=./prisma/schema.prisma; then
            echo "❌ Prisma client generation failed, trying alternative approach..."

            # Try installing Prisma CLI globally and generating
            if pnpm add -g prisma; then
              echo "✅ Prisma CLI installed globally"
              prisma generate --schema=./prisma/schema.prisma
            else
              echo "❌ Failed to install Prisma CLI globally"
              exit 1
            fi
          fi

          # Verify Prisma client was generated (check pnpm and npm paths)
          PRISMA_CLIENT_FOUND=false
          # Check pnpm paths with glob
          if [ -f "../../node_modules/.pnpm/@prisma+client*/node_modules/@prisma/client/index.d.ts" ] || [ -f "../../../node_modules/.pnpm/@prisma+client*/node_modules/@prisma/client/index.d.ts" ]; then
            PRISMA_CLIENT_FOUND=true
          fi
          # Check npm paths
          if [ -f "../../node_modules/.prisma/client/index.d.ts" ] || [ -f "../../../node_modules/.prisma/client/index.d.ts" ]; then
            PRISMA_CLIENT_FOUND=true
          fi
          if [ "$PRISMA_CLIENT_FOUND" = false ]; then
            echo "❌ Prisma client generation verification failed"
            echo "Checking workspace root node_modules..."
            ls -la ../../node_modules/.pnpm/@prisma+client*/node_modules/@prisma/client/ 2>/dev/null || echo "Prisma client directory not found in workspace root pnpm"
            ls -la ../../node_modules/.prisma/ 2>/dev/null || echo "Prisma client directory not found in workspace root npm"
            echo "Checking auth-service node_modules..."
            ls -la node_modules/.pnpm/@prisma+client*/node_modules/@prisma/client/ 2>/dev/null || echo "Prisma client directory not found in auth-service pnpm"
            ls -la node_modules/.prisma/ 2>/dev/null || echo "Prisma client directory not found in auth-service npm"
            exit 1
          else
            echo "✅ Prisma client generated successfully"
            echo "Client location: $(find ../../node_modules ../../../node_modules -name "index.d.ts" -path "*/@prisma/client/*" 2>/dev/null | head -1)"
          fi
      - name: Run Bias Test Suite
        run: |
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"

          # Navigate to the auth-service directory for testing
          cd backend/services/auth-service

          # Check if vitest is available
          if pnpm exec vitest --version >/dev/null 2>&1; then
            echo "🧪 Running bias and fairness tests..."

            # Run tests with bias/fairness patterns
            if pnpm exec vitest --run -t "(Bias|Fairness|DisparateImpact|bias|fairness)" --reporter=verbose; then
              echo "✅ Bias and fairness tests completed successfully"
            else
              # Check if tests failed due to no matching test files
              if pnpm exec vitest --run -t "(Bias|Fairness|DisparateImpact|bias|fairness)" --reporter=json 2>/dev/null | grep -q '"numTotalTestSuites":0'; then
                echo "ℹ️ No bias or fairness test files found - this is expected if bias testing hasn't been implemented yet"
                echo "📝 To add bias tests, create test files with patterns: Bias, Fairness, DisparateImpact"
              else
                echo "❌ Bias and fairness tests failed"
                exit 1
              fi
            fi
          else
            echo "⚠️ Vitest not available, skipping bias tests"
          fi

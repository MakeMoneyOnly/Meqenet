name: üîç PWA Compliance Testing

on:
  push:
    branches: [main, develop]
    paths:
      - "frontend/apps/website/**"
      - "frontend/apps/website/public/manifest.json"
      - "frontend/apps/website/next.config.mjs"
  pull_request:
    branches: [main, develop]
    paths:
      - "frontend/apps/website/**"
      - "frontend/apps/website/public/manifest.json"
      - "frontend/apps/website/next.config.mjs"
  schedule:
    - cron: "0 6 * * MON" # Weekly on Monday
  workflow_dispatch:

env:
  NODE_VERSION: "22"
  WORKING_DIRECTORY: "./frontend/apps/website"

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  security-events: write

jobs:
  pwa-compliance-test:
    name: üß™ PWA Compliance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v5

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: "https://registry.npmjs.org"

      - name: üì¶ Install pnpm
        run: |
          echo "üì¶ Installing pnpm..."
          # Use the official pnpm installation script
          curl -fsSL --connect-timeout 10 --max-time 30 https://get.pnpm.io/install.sh | sh -

          # Add pnpm to PATH for the current session
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"

          # Verify pnpm installation
          if command -v pnpm &> /dev/null; then
            echo "‚úÖ pnpm installed successfully"
            pnpm --version
          else
            echo "‚ùå pnpm installation failed"
            exit 1
          fi

      - name: üì¶ Install Dependencies
        run: |
          cd frontend
          pnpm config set registry https://registry.npmjs.org/
          pnpm install --no-frozen-lockfile --ignore-scripts

      - name: üîç Run PWA Compliance Tests
        run: |
          echo "üß™ Running PWA compliance tests..."
          node scripts/test-pwa-compliance.js
        continue-on-error: true

      - name: üìä Upload PWA Test Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pwa-test-report
          path: |
            pwa-test-report.json
            PWA_TEST_REPORT.md

      - name: üí¨ Comment PWA Results on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && always()
        with:
          script: |
            const fs = require('fs');

            // Read the PWA test report
            let reportContent = 'PWA compliance test results not available';
            try {
              if (fs.existsSync('PWA_TEST_REPORT.md')) {
                reportContent = fs.readFileSync('PWA_TEST_REPORT.md', 'utf8');
              }
            } catch (error) {
              console.log('Could not read PWA test report:', error.message);
            }

            // Create or update comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment =>
              comment.body.includes('üîç PWA Compliance Test Report')
            );

            const body = '## üîç PWA Compliance Test Report\n\n' + reportContent + '\n\n---\n*This comment was automatically generated by the PWA Compliance Testing workflow.*'

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  lighthouse-pwa-audit:
    name: üåä Lighthouse PWA Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [pwa-compliance-test]

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v5

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Install pnpm (with retry logic)
        run: |
          echo "üì¶ Installing pnpm with retry logic..."
          for i in {1..3}; do
          # Use the official pnpm installation script
          curl -fsSL --connect-timeout 10 --max-time 30 https://get.pnpm.io/install.sh | sh -

          # Add pnpm to PATH for the current session
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"

          # Verify pnpm installation
          if command -v pnpm &> /dev/null; then
              echo "‚úÖ pnpm installed successfully on attempt $i"
              break
            else
              echo "‚ùå pnpm installation failed on attempt $i"
              if [ $i -eq 3 ]; then
                echo "üîÑ Falling back to direct download..."
                curl -fsSL --connect-timeout 10 --max-time 30 https://get.pnpm.io/install.sh | PNPM_VERSION=${{ env.PNPM_VERSION }} sh -
                break
              fi
              sleep 2
            fi
          done

          # Verify pnpm installation
          pnpm --version

      - name: üìö Install Dependencies
        run: |
          cd frontend
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"

          # Clear any existing Metro cache that might cause SHA-1 issues
          echo "üßπ Clearing Metro bundler cache..."
          rm -rf apps/app/.metro || true
          rm -rf node_modules/.cache || true
          rm -rf apps/app/node_modules/.cache || true

          # Install dependencies with retry logic
          echo "üì¶ Installing dependencies..."
          for attempt in {1..3}; do
            if pnpm install --no-frozen-lockfile --ignore-scripts; then
              echo "‚úÖ Dependencies installed successfully"
              break
            else
              echo "‚ùå Installation failed on attempt $attempt"
              if [ $attempt -eq 3 ]; then
                echo "üí• CRITICAL: All dependency installation attempts failed"
                exit 1
              fi
              echo "‚è≥ Waiting before retry..."
              sleep 5
            fi
          done

          # Verify pnpm installation
          pnpm --version

      - name: üèóÔ∏è Build Website
        run: |
          cd frontend/apps/website
          npm run build

      - name: üöÄ Start Development Server
        run: |
          cd frontend/apps/website
          npm start &
          sleep 10

      - name: üåä Run Lighthouse PWA Audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: http://localhost:3000
          configPath: .github/lighthouse/pwa-config.json
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: üìä Upload Lighthouse Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-report
          path: |
            .lighthouseci/
            lighthouse-results.json

  pwa-manifest-validation:
    name: üìã PWA Manifest Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v5

      - name: üîç Validate PWA Manifest
        run: |
          echo "üìã Validating PWA manifest..."

          MANIFEST_PATH="frontend/apps/website/public/manifest.json"

          if [ ! -f "$MANIFEST_PATH" ]; then
            echo "‚ùå PWA manifest not found at $MANIFEST_PATH"
            exit 1
          fi

          # Validate JSON syntax
          if ! jq empty "$MANIFEST_PATH" 2>/dev/null; then
            echo "‚ùå Invalid JSON in PWA manifest"
            exit 1
          fi

          echo "‚úÖ PWA manifest is valid JSON"

          # Check required fields
          REQUIRED_FIELDS=("name" "short_name" "start_url" "display" "icons")
          for field in "${REQUIRED_FIELDS[@]}"; do
            if ! jq -e ".${field}" "$MANIFEST_PATH" >/dev/null; then
              echo "‚ùå Missing required field: $field"
              exit 1
            fi
          done

          echo "‚úÖ All required manifest fields are present"

          # Validate icon sizes
          ICONS=$(jq -r '.icons[]?.sizes // empty' "$MANIFEST_PATH")
          if echo "$ICONS" | grep -q "192x192" && echo "$ICONS" | grep -q "512x512"; then
            echo "‚úÖ Required icon sizes (192x192, 512x512) are present"
          else
            echo "‚ö†Ô∏è  Missing recommended icon sizes (192x192, 512x512)"
          fi

          # Validate display mode
          DISPLAY=$(jq -r '.display' "$MANIFEST_PATH")
          if [ "$DISPLAY" = "standalone" ]; then
            echo "‚úÖ Display mode is set to 'standalone' (recommended)"
          else
            echo "‚ö†Ô∏è  Display mode is '$DISPLAY', consider 'standalone' for better PWA experience"
          fi

          echo "‚úÖ PWA manifest validation completed successfully"

  pwa-service-worker-check:
    name: üîß Service Worker Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v5

      - name: üîß Check Service Worker Files
        run: |
          echo "üîß Checking service worker configuration..."

          PUBLIC_DIR="frontend/apps/website/public"
          NEXT_CONFIG="frontend/apps/website/next.config.mjs"

          # Check if next-pwa is configured
          if grep -q "next-pwa\|withPWA" "$NEXT_CONFIG"; then
            echo "‚úÖ Next.js PWA plugin is configured"
          else
            echo "‚ùå Next.js PWA plugin not found in configuration"
            exit 1
          fi

          # Check if service worker destination is configured
          if grep -q "dest.*public" "$NEXT_CONFIG"; then
            echo "‚úÖ Service worker destination is configured correctly"
          else
            echo "‚ö†Ô∏è  Service worker destination may not be configured correctly"
          fi

          # Check for existing service worker files (if any)
          SW_FILES=$(find "$PUBLIC_DIR" -name "*sw.js" -o -name "workbox-*" 2>/dev/null | wc -l)
          if [ "$SW_FILES" -gt 0 ]; then
            echo "‚úÖ Found $SW_FILES service worker related files"
          else
            echo "‚ÑπÔ∏è  No service worker files found (this is normal before build)"
          fi

          echo "‚úÖ Service worker validation completed"

  pwa-compliance-summary:
    name: üìä PWA Compliance Summary
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs:
      [
        pwa-compliance-test,
        lighthouse-pwa-audit,
        pwa-manifest-validation,
        pwa-service-worker-check,
      ]
    if: always()

    steps:
      - name: üì• Download All Reports
        uses: actions/download-artifact@v4
        with:
          path: ./reports

      - name: üìä Generate Compliance Summary
        run: |
          echo "## üîç PWA Compliance Testing Summary" > pwa-compliance-summary.md
          echo "" >> pwa-compliance-summary.md
          echo "**Generated:** $(date)" >> pwa-compliance-summary.md
          echo "**Run ID:** $GITHUB_RUN_ID" >> pwa-compliance-summary.md
          echo "" >> pwa-compliance-summary.md

          # Check PWA test results
          if [ -f "reports/pwa-test-report/pwa-test-report.json" ]; then
            SCORE=$(jq -r '.summary.overallScore' reports/pwa-test-report/pwa-test-report.json 2>/dev/null || echo "N/A")
            ISSUES=$(jq -r '.summary.totalIssues' reports/pwa-test-report/pwa-test-report.json 2>/dev/null || echo "N/A")
            WARNINGS=$(jq -r '.summary.totalWarnings' reports/pwa-test-report/pwa-test-report.json 2>/dev/null || echo "N/A")

            echo "### üß™ PWA Compliance Test Results" >> pwa-compliance-summary.md
            echo "- **Overall Score:** $SCORE/100" >> pwa-compliance-summary.md
            echo "- **Critical Issues:** $ISSUES" >> pwa-compliance-summary.md
            echo "- **Warnings:** $WARNINGS" >> pwa-compliance-summary.md

            if [ "$SCORE" != "N/A" ] && [ "$SCORE" -ge 80 ]; then
              echo "- **Status:** ‚úÖ PASSED" >> pwa-compliance-summary.md
            elif [ "$SCORE" != "N/A" ] && [ "$SCORE" -ge 60 ]; then
              echo "- **Status:** ‚ö†Ô∏è  NEEDS IMPROVEMENT" >> pwa-compliance-summary.md
            else
              echo "- **Status:** ‚ùå FAILED" >> pwa-compliance-summary.md
            fi
          else
            echo "### üß™ PWA Compliance Test Results" >> pwa-compliance-summary.md
            echo "- **Status:** ‚ùå Test report not found" >> pwa-compliance-summary.md
          fi

          echo "" >> pwa-compliance-summary.md

          # Check Lighthouse results
          if [ -f "reports/lighthouse-report/lighthouse-results.json" ]; then
            PWA_SCORE=$(jq -r '.categories.pwa.score * 100' reports/lighthouse-report/lighthouse-results.json 2>/dev/null || echo "N/A")
            PERFORMANCE_SCORE=$(jq -r '.categories.performance.score * 100' reports/lighthouse-report/lighthouse-results.json 2>/dev/null || echo "N/A")

            echo "### üåä Lighthouse Audit Results" >> pwa-compliance-summary.md
            echo "- **PWA Score:** $PWA_SCORE/100" >> pwa-compliance-summary.md
            echo "- **Performance Score:** $PERFORMANCE_SCORE/100" >> pwa-compliance-summary.md
          else
            echo "### üåä Lighthouse Audit Results" >> pwa-compliance-summary.md
            echo "- **Status:** Lighthouse report not available" >> pwa-compliance-summary.md
          fi

          echo "" >> pwa-compliance-summary.md
          echo "### üìã Validation Results" >> pwa-compliance-summary.md
          echo "- ‚úÖ **Manifest Validation:** Completed" >> pwa-compliance-summary.md
          echo "- ‚úÖ **Service Worker Check:** Completed" >> pwa-compliance-summary.md

          echo "" >> pwa-compliance-summary.md
          echo "### üéØ Recommendations" >> pwa-compliance-summary.md

          # Add recommendations based on scores
          if [ "$SCORE" != "N/A" ] && [ "$SCORE" -lt 80 ]; then
            echo "- Review and fix critical PWA compliance issues" >> pwa-compliance-summary.md
            echo "- Ensure proper service worker configuration" >> pwa-compliance-summary.md
            echo "- Verify PWA manifest completeness" >> pwa-compliance-summary.md
          fi

          if [ "$PWA_SCORE" != "N/A" ] && [ "$PWA_SCORE" -lt 80 ]; then
            echo "- Improve PWA-specific performance metrics" >> pwa-compliance-summary.md
            echo "- Optimize service worker caching strategies" >> pwa-compliance-summary.md
            echo "- Enhance offline capabilities" >> pwa-compliance-summary.md
          fi

          echo "- Regularly run PWA compliance tests" >> pwa-compliance-summary.md
          echo "- Keep PWA dependencies updated" >> pwa-compliance-summary.md

          echo "" >> pwa-compliance-summary.md
          echo "---" >> pwa-compliance-summary.md
          echo "*Generated by Meqenet PWA Compliance Testing Workflow*" >> pwa-compliance-summary.md

      - name: üì§ Upload Summary Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pwa-compliance-summary
          path: |
            pwa-compliance-summary.md

      - name: üéâ PWA Compliance Testing Complete
        run: |
          echo "üéâ PWA compliance testing workflow completed!"
          echo "üìä Check the uploaded artifacts for detailed reports"
          echo "üîç Summary report: pwa-compliance-summary.md"

name: 🛡️ OWASP ZAP Security Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  zap-baseline:
    name: 🧪 OWASP ZAP Security Scan (baseline)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      actions: read
      security-events: write
    steps:
      - uses: actions/checkout@v5

      - name: 📦 Install pnpm (with enhanced retry logic)
        run: |
          echo "📦 Installing pnpm with enhanced retry logic..."

          # Function to install pnpm with better error handling
          install_pnpm() {
            local attempt=$1
            echo "Attempt $attempt/5 - Installing pnpm..."

            # Try primary installation method with better error handling
            if curl -fsSL --connect-timeout 10 --max-time 30 https://get.pnpm.io/install.sh | sh - && command -v pnpm &> /dev/null; then
              echo "✅ Primary installation method succeeded"
              return 0
            else
              echo "❌ Primary installation method failed or pnpm not found"
              return 1
            fi

            # Try alternative CDN with proper validation
            echo "🔄 Trying alternative CDN..."
            if curl -fsSL --connect-timeout 10 --max-time 30 https://raw.githubusercontent.com/pnpm/get-pnpm/main/install.sh | sh -; then
              if command -v pnpm &> /dev/null; then
                echo "✅ Alternative CDN installation succeeded"
                return 0
              else
                echo "⚠️  Alternative CDN script ran but pnpm not found"
              fi
            fi

            # Try direct download method
            echo "🔄 Trying direct download method..."
            local pnpm_version="10.4.1"
            if curl -fsSL --connect-timeout 10 --max-time 30 "https://registry.npmjs.org/pnpm/-/pnpm-${pnpm_version}.tgz" -o pnpm.tgz && \
               npm install -g pnpm.tgz && \
               rm -f pnpm.tgz; then
              echo "✅ Direct download installation succeeded"
              return 0
            fi

            echo "❌ All installation methods failed on attempt $attempt"
            return 1
          }

          # Main retry loop
          for i in {1..5}; do
            if install_pnpm $i; then
              # Add pnpm to PATH for the current session
              export PNPM_HOME="$HOME/.local/share/pnpm"
              export PATH="$PNPM_HOME:$PATH"

              # Clear any problematic registry configurations that might interfere with pnpm
              pnpm config delete @jsr:registry 2>/dev/null || true
              pnpm config delete //npm.jsr.io/:_authToken 2>/dev/null || true

              # Verify pnpm installation
              if command -v pnpm &> /dev/null; then
                echo "✅ pnpm installed and verified successfully on attempt $i"
                pnpm --version
                break
              else
                echo "❌ pnpm command not found after installation on attempt $i"
                if [ $i -eq 5 ]; then
                  echo "💥 CRITICAL: pnpm installation failed after all attempts"
                  exit 1
                fi
              fi
            else
              if [ $i -eq 5 ]; then
                echo "💥 CRITICAL: All pnpm installation attempts failed"
                echo "🔍 Checking network connectivity..."
                curl -fsSL --connect-timeout 5 --max-time 10 https://www.google.com > /dev/null && echo "✅ Internet connection OK" || echo "❌ No internet connection"
                echo "🔍 Checking DNS resolution..."
                nslookup get.pnpm.io || echo "❌ DNS resolution failed"
                exit 1
              else
                echo "⏳ Waiting before retry..."
                sleep $((i * 3))  # Exponential backoff: 3s, 6s, 9s, 12s
              fi
            fi
          done

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: 📚 Install Dependencies
        run: |
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"

          # Configure npm registry with retry and auth handling
          echo "📦 Configuring npm registry..."

          # Clear any existing npm registry configuration that might be cached
          pnpm config delete registry || true
          pnpm config delete //registry.npmjs.org/:_authToken || true
          pnpm config delete @jsr:registry || true
          pnpm config delete //npm.jsr.io/:_authToken || true

          pnpm config set registry https://registry.npmjs.org/

          # Configure retry settings for rate limiting
          pnpm config set fetch-retry-mintimeout 20000
          pnpm config set fetch-retry-maxtimeout 120000
          pnpm config set fetch-timeout 60000

          # Set auth token if available and valid
          if [ -n "${{ secrets.NPM_TOKEN }}" ] && [ "${{ secrets.NPM_TOKEN }}" != "XXXX[hidden]" ] && [ "${{ secrets.NPM_TOKEN }}" != "" ]; then
            echo "🔐 Configuring NPM authentication..."
            pnpm config set //registry.npmjs.org/:_authToken "${{ secrets.NPM_TOKEN }}"

            # Test token validity by trying to access a private package (this will fail silently if token is invalid)
            if pnpm info @nestjs/core --registry=https://registry.npmjs.org/ --silent >/dev/null 2>&1; then
              echo "✅ NPM authentication configured and validated"
            else
              echo "⚠️  NPM_TOKEN may be invalid, but continuing with authentication configured"
            fi
          else
            echo "⚠️  No NPM_TOKEN provided, using public registry with enhanced retry"
            # Add additional retry configuration for public registry
            pnpm config set fetch-retry-mintimeout 30000
            pnpm config set fetch-retry-maxtimeout 180000
            pnpm config set fetch-timeout 90000
          fi

          # Install dependencies with retry logic
          echo "📦 Installing dependencies..."
          for attempt in {1..3}; do
            if pnpm install --no-frozen-lockfile --ignore-scripts; then
              echo "✅ Dependencies installed successfully"
              break
            else
              echo "❌ Installation failed on attempt $attempt"
              if [ $attempt -eq 3 ]; then
                echo "💥 CRITICAL: All dependency installation attempts failed"
                exit 1
              fi
              echo "⏳ Waiting before retry..."
              sleep 5
            fi
          done

      - name: Create ZAP rules file
        run: |
          cat > zap-rules.txt << 'EOF'
          IGNORE 10054 # Cookie without SameSite attribute (example)
          EOF

      - name: Run ZAP Baseline against placeholder target
        uses: zaproxy/action-baseline@v0.10.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: "owasp/zap2docker-stable"
          target: "https://example.com/"
          rules_file_name: "zap-rules.txt"
          cmd_options: "-a -I"
        continue-on-error: true

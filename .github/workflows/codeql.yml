name: üîí CodeQL Security Analysis

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: "0 6 * * 1"
  workflow_dispatch:

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  analyze:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: "https://registry.npmjs.org"

      - name: üì¶ Install pnpm (with retry logic)
        run: |
          echo "üì¶ Installing pnpm with retry logic..."
          for i in {1..3}; do
          # Use the official pnpm installation script
          curl -fsSL --connect-timeout 10 --max-time 30 https://get.pnpm.io/install.sh | sh -

          # Add pnpm to PATH for the current session
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"

          # Verify pnpm installation
          if command -v pnpm &> /dev/null; then
              echo "‚úÖ pnpm installed successfully on attempt $i"
              break
            else
              echo "‚ùå pnpm installation failed on attempt $i"
              if [ $i -eq 3 ]; then
                echo "üîÑ Falling back to direct download..."
                curl -fsSL --connect-timeout 10 --max-time 30 https://get.pnpm.io/install.sh | PNPM_VERSION=${{ env.PNPM_VERSION }} sh -
                break
              fi
              sleep 2
            fi
          done

          # Verify pnpm installation
          pnpm --version

      - name: üìö Install Dependencies
        run: |
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"

          # Configure npm registry with retry and auth handling
          echo "üì¶ Configuring npm registry..."

          # Clear any existing npm registry configuration that might be cached
          pnpm config delete registry || true
          pnpm config delete //registry.npmjs.org/:_authToken || true
          pnpm config delete @jsr:registry || true
          pnpm config delete //npm.jsr.io/:_authToken || true

          pnpm config set registry https://registry.npmjs.org/

          # Configure retry settings for rate limiting
          pnpm config set fetch-retry-mintimeout 20000
          pnpm config set fetch-retry-maxtimeout 120000
          pnpm config set fetch-timeout 60000

          # Set auth token if available and valid
          if [ -n "${{ secrets.NPM_TOKEN }}" ] && [ "${{ secrets.NPM_TOKEN }}" != "XXXX[hidden]" ] && [ "${{ secrets.NPM_TOKEN }}" != "" ]; then
            echo "üîê Configuring NPM authentication..."
            pnpm config set //registry.npmjs.org/:_authToken "${{ secrets.NPM_TOKEN }}"

            # Test token validity by trying to access a private package (this will fail silently if token is invalid)
            if pnpm info @nestjs/core --registry=https://registry.npmjs.org/ --silent >/dev/null 2>&1; then
              echo "‚úÖ NPM authentication configured and validated"
            else
              echo "‚ö†Ô∏è  NPM_TOKEN may be invalid, but continuing with authentication configured"
            fi
          else
            echo "‚ö†Ô∏è  No NPM_TOKEN provided, using public registry with enhanced retry"
            # Add additional retry configuration for public registry
            pnpm config set fetch-retry-mintimeout 30000
            pnpm config set fetch-retry-maxtimeout 180000
            pnpm config set fetch-timeout 90000
          fi

          # Install dependencies with retry logic
          echo "üì¶ Installing dependencies..."
          for attempt in {1..3}; do
            if pnpm install --no-frozen-lockfile --ignore-scripts; then
              echo "‚úÖ Dependencies installed successfully"
              break
            else
              echo "‚ùå Installation failed on attempt $attempt"
              if [ $attempt -eq 3 ]; then
                echo "üí• CRITICAL: All dependency installation attempts failed"
                exit 1
              fi
              echo "‚è≥ Waiting before retry..."
              sleep 5
            fi
          done

      - name: Setup React Native CLI
        working-directory: ./frontend
        run: |
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"
          npm install -g @react-native-community/cli || true
          cd apps/app && npx react-native doctor --fix || true
          cd apps/app && npx @react-native-community/cli doctor || true

      - uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript, java, kotlin
          config-file: .github/codeql/codeql-config.yml

      # Setup Java for Android/Kotlin analysis
      - name: üîß Setup Java (JDK 17)
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"
          cache: gradle

      - name: üîß Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 35
          target: android-35
          build-tools: "36.0.0"
          # Only install essential components to avoid emulator download issues
          components: platform-tools
          # Disable emulator to prevent ZipFile errors
          emulator: false

      - name: üì¶ Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Build Android project for Java/Kotlin analysis
      - name: üèóÔ∏è Build Android Project
        if: contains(matrix.language, 'java') || contains(matrix.language, 'kotlin')
        working-directory: ./frontend/apps/app
        run: |
          # Set up proper Node.js environment variables
          export NODE_ENV=development
          export ANDROID_HOME=$ANDROID_HOME
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH:$ANDROID_HOME/emulator:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools"

          # Ensure React Native Android dependencies are available
          echo "Checking React Native Android setup..."
          if [ ! -d "../../node_modules/react-native/ReactAndroid" ]; then
            echo "‚ö†Ô∏è  React Native Android directory not found, reinstalling React Native..."
            cd ../../ && export PNPM_HOME="$HOME/.local/share/pnpm" && export PATH="$PNPM_HOME:$PATH" && pnpm install react-native --ignore-scripts -w || {
              echo "‚ö†Ô∏è  React Native installation failed, but continuing with build..."
            }
          fi

          # Verify React Native Android files exist
          if [ -f "../../node_modules/react-native/ReactAndroid/gradle.properties" ]; then
            echo "‚úÖ React Native Android files found"
          else
            echo "‚ùå React Native Android files still missing, creating minimal gradle.properties..."
            mkdir -p ../../node_modules/react-native/ReactAndroid
            echo "# React Native Android Gradle Properties" > ../../node_modules/react-native/ReactAndroid/gradle.properties
            echo "android.useAndroidX=true" >> ../../node_modules/react-native/ReactAndroid/gradle.properties
            echo "android.enableJetifier=true" >> ../../node_modules/react-native/ReactAndroid/gradle.properties
            echo "‚úÖ Created minimal React Native Android gradle.properties"
          fi

          # Generate React Native codegen artifacts
          npx @react-native-community/cli codegen || true

          cd android && chmod +x ./gradlew

          # Build with error handling but ensure classes are generated
          echo "üèóÔ∏è Building Android project..."
          if ./gradlew assembleDebug --no-daemon --parallel --info; then
            echo "‚úÖ Android build completed successfully"
          else
            echo "‚ùå Gradle build failed - attempting minimal build for analysis..."
            # Try a minimal build that still generates classes
            if ./gradlew compileDebugKotlin compileDebugJavaWithJavac --no-daemon --info; then
              echo "‚úÖ Minimal build completed successfully"
            else
              echo "‚ùå Minimal build also failed - attempting even more basic compilation..."
              # Try to just compile Java sources if Kotlin fails
              ./gradlew compileDebugJavaWithJavac --no-daemon --info || {
                echo "‚ùå All compilation attempts failed - CodeQL analysis may be incomplete"
                echo "Continuing anyway to allow basic analysis..."
                # List what files might be available for analysis
                find . -name "*.java" -o -name "*.kt" | head -10 || true
              }
            fi
          fi

          # Verify that build outputs exist for CodeQL
          if [ -d "app/build/intermediates/javac/debug" ] || [ -d "app/build/tmp/kotlin-classes/debug" ]; then
            echo "‚úÖ Build outputs found - ready for CodeQL analysis"
          else
            echo "‚ö†Ô∏è Build outputs not found - CodeQL analysis may be limited"
          fi

      - uses: github/codeql-action/analyze@v3

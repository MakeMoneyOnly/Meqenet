name: 🔒 CodeQL Security Analysis

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: "0 6 * * 1"
  workflow_dispatch:

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  analyze:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: "https://registry.npmjs.org"

      - name: 📦 Install pnpm (with enhanced retry logic)
        run: |
          echo "📦 Installing pnpm with enhanced retry logic..."

          # Function to install pnpm with better error handling
          install_pnpm() {
            local attempt=$1
            echo "Attempt $attempt/5 - Installing pnpm..."

            # Try primary installation method with better error handling
            if curl -fsSL --connect-timeout 10 --max-time 30 https://get.pnpm.io/install.sh | sh - && command -v pnpm &> /dev/null; then
              echo "✅ Primary installation method succeeded"
              return 0
            else
              echo "❌ Primary installation method failed or pnpm not found"
              return 1
            fi

            # Try alternative CDN with proper validation
            echo "🔄 Trying alternative CDN..."
            if curl -fsSL --connect-timeout 10 --max-time 30 https://raw.githubusercontent.com/pnpm/get-pnpm/main/install.sh | sh -; then
              if command -v pnpm &> /dev/null; then
                echo "✅ Alternative CDN installation succeeded"
                return 0
              else
                echo "⚠️  Alternative CDN script ran but pnpm not found"
              fi
            fi

            # Try direct download method
            echo "🔄 Trying direct download method..."
            local pnpm_version="${{ env.PNPM_VERSION }}"
            if [ -z "$pnpm_version" ]; then
              pnpm_version="10.4.1"
            fi

            if curl -fsSL --connect-timeout 10 --max-time 30 "https://registry.npmjs.org/pnpm/-/pnpm-${pnpm_version}.tgz" -o pnpm.tgz && \
               npm install -g pnpm.tgz && \
               rm pnpm.tgz; then
              echo "✅ Direct download installation succeeded"
              return 0
            fi

            echo "❌ All installation methods failed on attempt $attempt"
            return 1
          }

          # Main retry loop
          for i in {1..5}; do
            if install_pnpm $i; then
              # Add pnpm to PATH for the current session
              export PNPM_HOME="$HOME/.local/share/pnpm"
              export PATH="$PNPM_HOME:$PATH"

              # Clear any problematic registry configurations that might interfere with pnpm
              pnpm config delete @jsr:registry 2>/dev/null || true
              pnpm config delete //npm.jsr.io/:_authToken 2>/dev/null || true

              # Verify pnpm installation
              if command -v pnpm &> /dev/null; then
                echo "✅ pnpm installed and verified successfully on attempt $i"
                pnpm --version
                break
              else
                echo "❌ pnpm command not found after installation on attempt $i"
                if [ $i -eq 5 ]; then
                  echo "💥 CRITICAL: pnpm installation failed after all attempts"
                  exit 1
                fi
              fi
            else
              if [ $i -eq 5 ]; then
                echo "💥 CRITICAL: All pnpm installation attempts failed"
                echo "🔍 Checking network connectivity..."
                curl -fsSL --connect-timeout 5 --max-time 10 https://www.google.com > /dev/null && echo "✅ Internet connection OK" || echo "❌ No internet connection"
                echo "🔍 Checking DNS resolution..."
                nslookup get.pnpm.io || echo "❌ DNS resolution failed"
                exit 1
              else
                echo "⏳ Waiting before retry..."
                sleep $((i * 3))  # Exponential backoff: 3s, 6s, 9s, 12s
              fi
            fi
          done

      - name: 📚 Install Dependencies
        run: |
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"

          # Configure npm registry with retry and auth handling
          echo "📦 Configuring npm registry..."

          # Clear any existing npm registry configuration that might be cached
          pnpm config delete registry || true
          pnpm config delete //registry.npmjs.org/:_authToken || true
          pnpm config delete @jsr:registry || true
          pnpm config delete //npm.jsr.io/:_authToken || true

          pnpm config set registry https://registry.npmjs.org/

          # Configure retry settings for rate limiting
          pnpm config set fetch-retry-mintimeout 20000
          pnpm config set fetch-retry-maxtimeout 120000
          pnpm config set fetch-timeout 60000

          # Set auth token if available and valid
          if [ -n "${{ secrets.NPM_TOKEN }}" ] && [ "${{ secrets.NPM_TOKEN }}" != "XXXX[hidden]" ] && [ "${{ secrets.NPM_TOKEN }}" != "" ]; then
            echo "🔐 Configuring NPM authentication..."
            pnpm config set //registry.npmjs.org/:_authToken "${{ secrets.NPM_TOKEN }}"

            # Test token validity by trying to access a private package (this will fail silently if token is invalid)
            if pnpm info @nestjs/core --registry=https://registry.npmjs.org/ --silent >/dev/null 2>&1; then
              echo "✅ NPM authentication configured and validated"
            else
              echo "⚠️  NPM_TOKEN may be invalid, but continuing with authentication configured"
            fi
          else
            echo "⚠️  No NPM_TOKEN provided, using public registry with enhanced retry"
            # Add additional retry configuration for public registry
            pnpm config set fetch-retry-mintimeout 30000
            pnpm config set fetch-retry-maxtimeout 180000
            pnpm config set fetch-timeout 90000
          fi

          # Install dependencies with retry logic
          echo "📦 Installing dependencies..."
          for attempt in {1..3}; do
            if pnpm install --no-frozen-lockfile --ignore-scripts; then
              echo "✅ Dependencies installed successfully"
              break
            else
              echo "❌ Installation failed on attempt $attempt"
              if [ $attempt -eq 3 ]; then
                echo "💥 CRITICAL: All dependency installation attempts failed"
                exit 1
              fi
              echo "⏳ Waiting before retry..."
              sleep 5
            fi
          done

      - name: Setup React Native CLI
        working-directory: ./frontend
        run: |
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"
          npm install -g @react-native-community/cli || true
          cd apps/app && npx react-native doctor --fix || true
          cd apps/app && npx @react-native-community/cli doctor || true

      - uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript, java, kotlin
          config-file: .github/codeql/codeql-config.yml

      # Setup Java for Android/Kotlin analysis
      - name: 🔧 Setup Java (JDK 17)
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"
          cache: gradle

      - name: 🔧 Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 35
          target: android-35
          build-tools: "36.0.0"
          # Only install essential components to avoid emulator download issues
          components: platform-tools
          # Disable emulator to prevent ZipFile errors
          emulator: false

      - name: 📦 Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Build Android project for Java/Kotlin analysis
      - name: 🏗️ Build Android Project
        if: contains(matrix.language, 'java') || contains(matrix.language, 'kotlin')
        working-directory: ./frontend/apps/app
        run: |
          # Set up proper Node.js environment variables
          export NODE_ENV=development
          export ANDROID_HOME=$ANDROID_HOME
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH:$ANDROID_HOME/emulator:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools"

          # Ensure React Native Android dependencies are available
          echo "Checking React Native Android setup..."
          if [ ! -d "../../node_modules/react-native/ReactAndroid" ]; then
            echo "⚠️  React Native Android directory not found, reinstalling React Native..."
            cd ../../ && export PNPM_HOME="$HOME/.local/share/pnpm" && export PATH="$PNPM_HOME:$PATH" && pnpm install react-native --ignore-scripts -w || {
              echo "⚠️  React Native installation failed, but continuing with build..."
            }
          fi

          # Verify React Native Android files exist
          if [ -f "../../node_modules/react-native/ReactAndroid/gradle.properties" ]; then
            echo "✅ React Native Android files found"
          else
            echo "❌ React Native Android files still missing, creating minimal gradle.properties..."
            mkdir -p ../../node_modules/react-native/ReactAndroid
            echo "# React Native Android Gradle Properties" > ../../node_modules/react-native/ReactAndroid/gradle.properties
            echo "android.useAndroidX=true" >> ../../node_modules/react-native/ReactAndroid/gradle.properties
            echo "android.enableJetifier=true" >> ../../node_modules/react-native/ReactAndroid/gradle.properties
            echo "✅ Created minimal React Native Android gradle.properties"
          fi

          # Generate React Native codegen artifacts
          npx @react-native-community/cli codegen || true

          cd android && chmod +x ./gradlew

          # Build with error handling but ensure classes are generated
          echo "🏗️ Building Android project..."
          if ./gradlew assembleDebug --no-daemon --parallel --info; then
            echo "✅ Android build completed successfully"
          else
            echo "❌ Gradle build failed - attempting minimal build for analysis..."
            # Try a minimal build that still generates classes
            if ./gradlew compileDebugKotlin compileDebugJavaWithJavac --no-daemon --info; then
              echo "✅ Minimal build completed successfully"
            else
              echo "❌ Minimal build also failed - attempting even more basic compilation..."
              # Try to just compile Java sources if Kotlin fails
              ./gradlew compileDebugJavaWithJavac --no-daemon --info || {
                echo "❌ All compilation attempts failed - CodeQL analysis may be incomplete"
                echo "Continuing anyway to allow basic analysis..."
                # List what files might be available for analysis
                find . -name "*.java" -o -name "*.kt" | head -10 || true
              }
            fi
          fi

          # Verify that build outputs exist for CodeQL
          if [ -d "app/build/intermediates/javac/debug" ] || [ -d "app/build/tmp/kotlin-classes/debug" ]; then
            echo "✅ Build outputs found - ready for CodeQL analysis"
          else
            echo "⚠️ Build outputs not found - CodeQL analysis may be limited"
          fi

      - uses: github/codeql-action/analyze@v3

---
name: "Meqenet CodeQL Configuration - FinTech Enterprise"

# CodeQL configuration for fintech-grade security analysis
# Enterprise-grade configuration optimized for BNPL and financial services
# Focused on TypeScript/JavaScript with comprehensive security coverage

# Global settings
disable-default-queries: false

# Enterprise-grade query suites for TypeScript/JavaScript only
queries:
  # Core Security Analysis - Built-in suites
  - uses: security-and-quality
  - uses: security-experimental

# TypeScript/JavaScript security configuration
paths:
  # Backend TypeScript services
  - backend/services/auth-service/src
  - backend/services/api-gateway/src
  - backend/src
  # Frontend TypeScript/React
  - frontend/apps/app/src
  - frontend/apps/website/src
  # Shared libraries
  - backend/shared
  - frontend/libs
paths-ignore:
  - "node_modules"
  - "dist"
  - "build"
  - ".git"
  - "**/*.spec.ts"
  - "**/*.test.ts"
  - "**/*.d.ts"

# Language-specific configurations
# This project is TypeScript/JavaScript only - no Java/Kotlin code

# TypeScript/JavaScript Security Configuration for FinTech
# Using built-in CodeQL query suites instead of individual queries
# This ensures compatibility and comprehensive coverage

# Enterprise-grade severity thresholds for fintech compliance
# Note: Severity configuration is managed by built-in query suites
# Custom severity levels may not be supported in all CodeQL versions

# FinTech Enterprise Configuration Notes:
# - Uses built-in CodeQL query suites for reliable analysis
# - Focuses on TypeScript/JavaScript codebase only
# - Optimized for BNPL and financial services security requirements
# - Excludes test files and build artifacts automatically via paths-ignore

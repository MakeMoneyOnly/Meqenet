#!/bin/sh
# Meqenet.et Pre-Commit Hook
# Enterprise-Grade FinTech Security & Quality Gate
# Manual lint-staged implementation to bypass Windows bugs.

# Exit immediately if a command exits with a non-zero status.
set -e

echo "🚀 Meqenet.et Enterprise Pre-Commit Quality Checks (Manual Mode)"
echo "=================================================="

# Set NODE_OPTIONS to prevent memory issues and enable better performance
export NODE_OPTIONS="--max-old-space-size=4096 --enable-source-maps=false"

echo "📝 Phase 0: Pre-commit validation started."

# ============================================================================
# PHASE 0.5: EARLY COMMIT MESSAGE VALIDATION (INTERACTIVE COMMITS)
# ============================================================================
echo "📝 Phase 0.5: Checking for interactive commit..."

# Check if this is an interactive commit (no -m flag used)
if [ -t 0 ] && [ -t 1 ]; then
  echo "🔍 Interactive commit detected - validating commit message format first..."

  # Prompt for commit message early
  echo "Please enter your commit message for validation:"
  echo "(Format: type(scope): description (TICKET-123))"
  read -p "Commit message: " EARLY_COMMIT_MSG

  if [ -z "$EARLY_COMMIT_MSG" ]; then
    echo "❌ ERROR: Commit message cannot be empty"
    echo "🔒 COMMIT BLOCKED FOR ENTERPRISE COMPLIANCE"
    exit 1
  fi

  # IMMEDIATE VALIDATION - Check for Jira ticket first
  if ! echo "$EARLY_COMMIT_MSG" | grep -q -E '\((JIRA|TICKET|ISSUE|MEQ|BNPL|PAY|AUTH|SEC)-[0-9]+\)'; then
    echo "❌ INVALID COMMIT MESSAGE FORMAT!"
    echo ""
    echo "🚨 MISSING JIRA TICKET REFERENCE"
    echo ""
    echo "📋 REQUIRED FORMAT:"
    echo "   type(scope): description (TICKET-123)"
    echo ""
    echo "✅ Valid ticket formats:"
    echo "   (JIRA-123)    (TICKET-456)   (ISSUE-789)"
    echo "   (MEQ-101)     (BNPL-202)     (PAY-303)"
    echo "   (AUTH-404)    (SEC-505)"
    echo ""
    echo "🔒 COMMIT BLOCKED FOR ENTERPRISE COMPLIANCE"
    echo "💡 Pro tip: Use 'git commit -m \"your message\"' to avoid this prompt"
    exit 1
  fi

  echo "✅ Early commit message validation passed!"
  echo "⚡ Proceeding with full pre-commit checks..."
else
  echo "  • Non-interactive commit detected (using -m flag)"
  echo "  • Commit message will be validated in commit-msg hook"
fi

# ============================================================================
# PHASE 1: BASIC QUALITY GATES (Manual Implementation)
# ============================================================================

# 1. Find all relevant staged files
ALL_RELEVANT_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep -E '\.(js|jsx|ts|tsx|json|md|yml|yaml)$' || true)

if [ -z "$ALL_RELEVANT_FILES" ]; then
    echo "No relevant files to check. Skipping hooks."
    exit 0
fi

STAGED_COUNT=$(echo "$ALL_RELEVANT_FILES" | wc -l)
echo "📊 Staged files to check: $STAGED_COUNT"

# ============================================================================
# PHASE 1: BASIC QUALITY GATES (Manual Implementation)
# ============================================================================
echo "📝 Phase 1: Running basic quality checks..."

# 1a. Filter for files that need linting
JS_TS_FILES=$(echo "$ALL_RELEVANT_FILES" | grep -E '\.(js|jsx|ts|tsx)$' || true)

# 1b. Run ESLint
if [ -n "$JS_TS_FILES" ]; then
  echo "  • Running ESLint on staged files..."
  pnpm lint:staged:eslint $JS_TS_FILES
  echo "  ✅ ESLint passed."
else
  echo "  • No JS/TS files to lint."
fi

# 1c. Run Prettier on all relevant files
echo "  • Running Prettier on staged files..."
# Handle file paths with spaces by processing each file individually
echo "$ALL_RELEVANT_FILES" | while IFS= read -r file; do
  if [ -n "$file" ]; then
    pnpm lint:staged:prettier "$file"
  fi
done
echo "  ✅ Prettier passed."

# 1d. Add back the changes made by the formatters
echo "  • Staging formatted files..."
echo "$ALL_RELEVANT_FILES" | while IFS= read -r file; do
  if [ -n "$file" ]; then
    git add "$file"
  fi
done

# ============================================================================
# PHASE 2: ENTERPRISE SECURITY VALIDATION (Comprehensive)
# ============================================================================
echo "🔐 Phase 2: Running comprehensive enterprise security validation..."

# Enterprise-grade security scanning
echo "  • Running enterprise security scan..."
if ! pnpm run security:enterprise-scan 2>&1; then
  echo "❌ ENTERPRISE SECURITY SCAN FAILED!"
  exit 1
fi

# Supply chain security validation
echo "  • Running supply chain security checks..."
if ! pnpm run security:supply-chain 2>&1; then
  echo "❌ SUPPLY CHAIN SECURITY CHECKS FAILED!"
  exit 1
fi

# ============================================================================
# PHASE 3: COMPLIANCE & REGULATORY CHECKS
# ============================================================================
echo "📋 Phase 3: Running compliance and regulatory checks..."

# Ethiopian FinTech compliance validation
echo "  • Running Ethiopian FinTech compliance checks..."
if ! pnpm run validate:ethiopian-compliance 2>&1; then
  echo "❌ ETHIOPIAN COMPLIANCE CHECKS FAILED!"
  exit 1
fi

# Audit logging compliance
echo "  • Validating audit logging compliance..."
if ! pnpm run compliance:audit-logging 2>&1; then
  echo "❌ AUDIT LOGGING COMPLIANCE FAILED!"
  exit 1
fi

# Transaction security validation
echo "  • Validating transaction security..."
if ! pnpm run compliance:transaction-security 2>&1; then
  echo "❌ TRANSACTION SECURITY VALIDATION FAILED!"
  exit 1
fi

# ============================================================================
# PHASE 4: DEPENDENCY SECURITY AUDIT
# ============================================================================
echo "🔍 Phase 4: Running dependency security audit..."

# Comprehensive dependency audit
echo "  • Running comprehensive dependency audit..."
if ! pnpm run security:audit 2>&1; then
  echo "❌ DEPENDENCY AUDIT FAILED!"
  exit 1
fi

# ============================================================================
# PHASE 5: CODE QUALITY METRICS
# ============================================================================
echo "📊 Phase 5: Running code quality metrics..."

# TypeScript compilation check
echo "  • Running TypeScript compilation check..."
if ! pnpm run typecheck 2>&1; then
  echo "❌ TYPESCRIPT COMPILATION FAILED!"
  exit 1
fi

# ============================================================================
# SUCCESS
# ============================================================================

echo ""
echo "🎉 ALL ENTERPRISE PRE-COMMIT CHECKS PASSED!"
echo "✅ Code quality, security, compliance, and regulatory requirements met"
echo "🇪🇹 Ready to contribute to Ethiopia's financial future!"

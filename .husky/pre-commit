# Meqenet.et Pre-Commit Hook
# Enterprise-Grade FinTech Security & Quality Gate

echo "üöÄ Meqenet.et Enterprise Pre-Commit Quality Checks"
echo "=================================================="

# Set NODE_OPTIONS to prevent memory issues and enable better performance
export NODE_OPTIONS="--max-old-space-size=4096 --enable-source-maps=false"
export LINT_STAGED_CONCURRENCY=2

# Get staged files count for better reporting
STAGED_COUNT=$(git diff --cached --name-only | wc -l)
echo "üìä Staged files: $STAGED_COUNT"

# ============================================================================
# PHASE 1: BASIC QUALITY GATES
# ============================================================================

echo "üìù Phase 1: Running basic quality checks..."

# 1. Run lint-staged for staged files (formatting and linting)
echo "  ‚Ä¢ Code formatting and linting..."
if [ "$STAGED_COUNT" -gt 50 ]; then
  echo "  ‚ö†Ô∏è  Large commit detected ($STAGED_COUNT files). Using optimized processing..."
fi

pnpm exec lint-staged || {
  echo "‚ùå Code quality checks failed"
  echo ""
  echo "üìã Issues found in staged files. Please fix the following:"
  echo "   ‚Ä¢ Run: pnpm eslint --fix <problematic-file>"
  echo "   ‚Ä¢ Run: pnpm prettier --write <problematic-file>"
  echo ""
  echo "üö´ Commit blocked. Fix issues and try again, or use --no-verify to bypass."
  exit 1
}

# ============================================================================
# PHASE 2: ENTERPRISE SECURITY VALIDATION
# ============================================================================

echo "üîê Phase 2: Enterprise security validation..."

# 2. Secret Scanning - Critical for FinTech
echo "  ‚Ä¢ Scanning for hardcoded secrets..."
if ! timeout 30 pnpm run security:secrets 2>&1; then
  echo "‚ùå SECRET SCANNING FAILED!"
  echo ""
  echo "üö® CRITICAL: Potential hardcoded secrets detected!"
  echo "   ‚Ä¢ Check the output above for specific files and issues found"
  echo "   ‚Ä¢ Review and remove any hardcoded API keys, passwords, or tokens"
  echo "   ‚Ä¢ Use environment variables or secure vaults instead"
  echo ""
  echo "üîß To bypass: git commit --no-verify"
  exit 1
fi

# 3. Dependency Security Scan
echo "  ‚Ä¢ Checking for vulnerable dependencies..."
if ! timeout 20 pnpm audit --audit-level high >/dev/null 2>&1; then
  echo "‚ö†Ô∏è  DEPENDENCY VULNERABILITIES DETECTED!"
  echo "   ‚Ä¢ High or critical security vulnerabilities found"
  echo "   ‚Ä¢ Run 'pnpm audit' for detailed information"
  echo "   ‚Ä¢ Consider updating vulnerable packages immediately"
fi

# 4. License Compliance Check
echo "  ‚Ä¢ Validating license compliance..."
if ! timeout 15 pnpm run security:license-check >/dev/null 2>&1; then
  echo "‚ö†Ô∏è  LICENSE COMPLIANCE ISSUES DETECTED!"
  echo "   ‚Ä¢ Incompatible or restricted licenses found"
  echo "   ‚Ä¢ Review reports/license-check.json for details"
fi

# 5. Financial Logic Validation
echo "  ‚Ä¢ Validating financial logic integrity..."
STAGED_FILES=$(git diff --cached --name-only)

# Check for financial/payment related files
FINANCIAL_FILES=$(echo "$STAGED_FILES" | grep -E "(payment|credit|bnpl|financial|auth|loan|interest|transaction|money|currency|wallet)" || true)
if [ -n "$FINANCIAL_FILES" ]; then
  echo "  ‚Ä¢ Financial code changes detected - validating critical patterns..."

  # Check for dangerous patterns in financial code
  DANGEROUS_PATTERNS=$(echo "$FINANCIAL_FILES" | xargs grep -l "eval(\|new Function\|setTimeout.*eval\|setInterval.*eval\|Function.*constructor\|global\[" 2>/dev/null || true)
  if [ -n "$DANGEROUS_PATTERNS" ]; then
    echo "‚ùå CRITICAL: Dangerous code patterns detected in financial logic!"
    echo "   ‚Ä¢ Files with risky patterns: $DANGEROUS_PATTERNS"
    echo "   ‚Ä¢ eval(), dynamic code execution, or global object manipulation found"
    echo "   ‚Ä¢ This poses severe security risks in financial systems"
    echo "   ‚Ä¢ Replace with secure alternatives or remove if unnecessary"
    exit 1
  fi

  # Check for SQL injection patterns in financial code
  SQL_INJECTION=$(echo "$FINANCIAL_FILES" | xargs grep -l "sql.*+\|query.*+\|\$\{.*\}.*SELECT\|\$\{.*\}.*INSERT\|\$\{.*\}.*UPDATE\|\$\{.*\}.*DELETE" 2>/dev/null || true)
  if [ -n "$SQL_INJECTION" ]; then
    echo "‚ö†Ô∏è  WARNING: Potential SQL injection patterns detected in financial code"
    echo "   ‚Ä¢ Files: $SQL_INJECTION"
    echo "   ‚Ä¢ Use parameterized queries or ORM methods instead"
    echo "   ‚Ä¢ Review for proper input sanitization"
  fi

  # Check for proper error handling in financial code
  NO_ERROR_HANDLING=$(echo "$FINANCIAL_FILES" | xargs grep -L "try.*catch\|throw.*Error\|reject.*Error\|catch.*error\|handleError" 2>/dev/null | grep -v ".test." | grep -v ".spec." | grep -v ".mock." || true)
  if [ -n "$NO_ERROR_HANDLING" ]; then
    echo "‚ö†Ô∏è  WARNING: Financial code without comprehensive error handling detected"
    echo "   ‚Ä¢ Files missing error handling: $(echo "$NO_ERROR_HANDLING" | wc -l) files"
    echo "   ‚Ä¢ Financial operations must have robust error handling"
    echo "   ‚Ä¢ Consider adding try-catch blocks, proper logging, and error recovery"
  fi
fi

# ============================================================================
# PHASE 3: COMPLIANCE & REGULATORY CHECKS
# ============================================================================

echo "üìã Phase 3: Compliance and regulatory checks..."

# 6. NBE Compliance Validation
echo "  ‚Ä¢ NBE (Ethiopian Banking) compliance validation..."
if [ -n "$FINANCIAL_FILES" ]; then
  # Check for required compliance patterns
  COMPLIANCE_MISSING=$(echo "$FINANCIAL_FILES" | xargs grep -L "audit\|compliance\|NBE\|regulatory\|AML\|KYC" 2>/dev/null | grep -v ".test." | grep -v ".spec." || true)
  if [ -n "$COMPLIANCE_MISSING" ]; then
    echo "‚ö†Ô∏è  WARNING: Financial changes without explicit compliance documentation"
    echo "   ‚Ä¢ Files missing compliance markers: $(echo "$COMPLIANCE_MISSING" | wc -l) files"
    echo "   ‚Ä¢ NBE requires audit trails for all financial transactions"
    echo "   ‚Ä¢ Consider adding compliance comments or audit logging"
    echo "   ‚Ä¢ Required tags: @audit, @compliance, @nbe, @regulatory, @aml, @kyc"
  fi
fi

# 7. GDPR Compliance Check
echo "  ‚Ä¢ GDPR compliance validation..."
PERSONAL_DATA_FILES=$(echo "$STAGED_FILES" | grep -E "(user|customer|personal|profile|auth|account|identity|contact|email|phone|address)" || true)
if [ -n "$PERSONAL_DATA_FILES" ]; then
  GDPR_MISSING=$(echo "$PERSONAL_DATA_FILES" | xargs grep -L "consent\|privacy\|gdpr\|data.*protection\|pii\|personal.*data" 2>/dev/null | grep -v ".test." | grep -v ".spec." || true)
  if [ -n "$GDPR_MISSING" ]; then
    echo "‚ö†Ô∏è  WARNING: Personal data handling without GDPR compliance markers"
    echo "   ‚Ä¢ Files missing GDPR markers: $(echo "$GDPR_MISSING" | wc -l) files"
    echo "   ‚Ä¢ User data changes require GDPR compliance documentation"
    echo "   ‚Ä¢ Ensure proper consent mechanisms and data protection"
    echo "   ‚Ä¢ Required: Data retention policies, consent management, PII classification"
  fi
fi

# 8. Accessibility Compliance Check
echo "  ‚Ä¢ Accessibility compliance validation..."
UI_FILES=$(echo "$STAGED_FILES" | grep -E "\.(tsx|jsx|vue|svelte|html)$" || true)
if [ -n "$UI_FILES" ]; then
  ACCESSIBILITY_MISSING=$(echo "$UI_FILES" | xargs grep -L "aria-\|role=\|tabindex\|alt=\|accessibility\|a11y\|wcag" 2>/dev/null || true)
  if [ -n "$ACCESSIBILITY_MISSING" ]; then
    echo "‚ÑπÔ∏è  INFO: UI changes detected - consider accessibility compliance"
    echo "   ‚Ä¢ Files without accessibility markers: $(echo "$ACCESSIBILITY_MISSING" | wc -l) files"
    echo "   ‚Ä¢ WCAG 2.1 AA compliance recommended for Ethiopian market"
    echo "   ‚Ä¢ Consider adding ARIA labels, semantic HTML, and keyboard navigation"
  fi
fi

# ============================================================================
# PHASE 4: CODE QUALITY METRICS
# ============================================================================

echo "üìä Phase 4: Code quality metrics..."

# 9. Complexity Analysis
echo "  ‚Ä¢ Analyzing code complexity..."
COMPLEX_FILES=$(echo "$STAGED_FILES" | grep -E "\.(ts|tsx|js|jsx)$" | head -10)
if [ -n "$COMPLEX_FILES" ]; then
  # Check for overly complex functions (lines of code heuristic)
  COMPLEX_FUNCTIONS=$(echo "$COMPLEX_FILES" | xargs wc -l | awk '$1 > 100 {print $2 ": " $1 " lines"}' || true)
  if [ -n "$COMPLEX_FUNCTIONS" ]; then
    echo "‚ö†Ô∏è  WARNING: Large files detected (>100 lines)"
    echo "$COMPLEX_FUNCTIONS"
    echo "   ‚Ä¢ Consider breaking down large files for maintainability"
    echo "   ‚Ä¢ Large files are harder to review and maintain"
  fi

  # Check for nested complexity
  DEEP_NESTING=$(echo "$COMPLEX_FILES" | xargs grep -n "if.*if\|for.*for\|while.*while" | wc -l 2>/dev/null || echo "0")
  if [ "$DEEP_NESTING" -gt 5 ]; then
    echo "‚ö†Ô∏è  WARNING: Deep nesting detected in multiple files"
    echo "   ‚Ä¢ Consider extracting nested logic into separate functions"
    echo "   ‚Ä¢ Deep nesting reduces code readability and maintainability"
  fi
fi

# 10. Dead Code Detection
echo "  ‚Ä¢ Checking for unused code..."
UNUSED_EXPORTS=$(echo "$STAGED_FILES" | xargs grep -l "export.*unused\|//.*TODO.*remove\|//.*FIXME.*remove" 2>/dev/null || true)
if [ -n "$UNUSED_EXPORTS" ]; then
  echo "‚ÑπÔ∏è  INFO: Potential dead code or TODO items detected"
  echo "   ‚Ä¢ Files with unused markers: $(echo "$UNUSED_EXPORTS" | wc -l) files"
  echo "   ‚Ä¢ Review and remove unused exports, dead code, and outdated TODOs"
fi

# ============================================================================
# PHASE 5: DEPENDENCY & SECURITY SCANNING
# ============================================================================

echo "üõ°Ô∏è  Phase 5: Dependency and security scanning..."

# 11. Dependency Vulnerability Check
echo "  ‚Ä¢ Checking for dependency vulnerabilities..."
if ! timeout 15 pnpm audit --audit-level moderate >/dev/null 2>&1; then
  echo "‚ö†Ô∏è  WARNING: Dependency vulnerabilities detected"
  echo "   ‚Ä¢ Run 'pnpm audit' for detailed vulnerability information"
  echo "   ‚Ä¢ Consider updating vulnerable packages or applying security patches"
  echo "   ‚Ä¢ Critical vulnerabilities should be addressed immediately"
fi

# 12. Outdated Dependencies Check
echo "  ‚Ä¢ Checking for outdated dependencies..."
OUTDATED_COUNT=$(timeout 10 pnpm outdated --json 2>/dev/null | grep -c '"latest"' || echo "0")
if [ "$OUTDATED_COUNT" -gt 10 ]; then
  echo "‚ÑπÔ∏è  INFO: $OUTDATED_COUNT+ outdated dependencies detected"
  echo "   ‚Ä¢ Consider updating dependencies regularly"
  echo "   ‚Ä¢ Run 'pnpm update' to update non-breaking changes"
  echo "   ‚Ä¢ Major version updates should be tested thoroughly"
fi

# ============================================================================
# PHASE 6: FINAL VALIDATION
# ============================================================================

echo "üéØ Phase 6: Final validation..."

# 13. Commit Message Validation
echo "  ‚Ä¢ Validating commit message format..."
COMMIT_MSG=$(git log -1 --pretty=%B 2>/dev/null || echo "")
if [ -n "$COMMIT_MSG" ]; then
  if ! echo "$COMMIT_MSG" | grep -qE "^(feat|fix|docs|style|refactor|perf|test|chore|build|ci|security)(\(.+\))?: .+"; then
    echo "‚ö†Ô∏è  WARNING: Commit message doesn't follow conventional format"
    echo "   ‚Ä¢ Use: type(scope): description"
    echo "   ‚Ä¢ Types: feat, fix, docs, style, refactor, perf, test, chore, build, ci, security"
    echo "   ‚Ä¢ Example: feat(auth): add biometric authentication"
    echo "   ‚Ä¢ Example: fix(payment): resolve transaction timeout issue"
  fi

  # Check for minimum description length
  MSG_LENGTH=$(echo "$COMMIT_MSG" | wc -c)
  if [ "$MSG_LENGTH" -lt 10 ]; then
    echo "‚ö†Ô∏è  WARNING: Commit message is too short"
    echo "   ‚Ä¢ Provide more descriptive commit messages"
    echo "   ‚Ä¢ Explain what changed and why"
  fi
fi

# 14. File Size Validation
echo "  ‚Ä¢ Validating file sizes..."
LARGE_FILES=$(git diff --cached --name-only | xargs ls -lh 2>/dev/null | awk '$5 > 10485760 {print $9 ": " $5}' || true)
if [ -n "$LARGE_FILES" ]; then
  echo "‚ö†Ô∏è  WARNING: Large files detected in commit"
  echo "$LARGE_FILES"
  echo "   ‚Ä¢ Files larger than 10MB may cause repository bloat"
  echo "   ‚Ä¢ Consider using Git LFS for large binary files"
  echo "   ‚Ä¢ Review if large files are necessary for the repository"
fi

# 15. Binary File Detection
echo "  ‚Ä¢ Checking for binary files..."
BINARY_FILES=$(git diff --cached --name-only | xargs file 2>/dev/null | grep -v "text\|ASCII\|UTF-8\|empty" | wc -l 2>/dev/null || echo "0")
if [ "$BINARY_FILES" -gt 0 ]; then
  echo "‚ÑπÔ∏è  INFO: $BINARY_FILES binary file(s) detected in commit"
  echo "   ‚Ä¢ Ensure binary files are necessary and appropriately sized"
  echo "   ‚Ä¢ Consider if they should be in .gitignore or Git LFS"
fi

# ============================================================================
# SUCCESS
# ============================================================================

echo ""
echo "‚úÖ ALL ENTERPRISE PRE-COMMIT CHECKS PASSED!"
echo "üá™üáπ Meqenet.et maintains world-class FinTech security standards!"
echo ""
echo "üéâ Your code meets enterprise-grade quality requirements:"
echo "   ‚Ä¢ üîê Security: Secret scanning ‚úì | Dependency audit ‚úì | Code security ‚úì"
echo "   ‚Ä¢ üí∞ Financial: Logic validation ‚úì | Compliance checks ‚úì | Error handling ‚úì"
echo "   ‚Ä¢ üìã Regulatory: NBE compliance ‚úì | GDPR validation ‚úì | Accessibility ‚úì"
echo "   ‚Ä¢ üìä Quality: Code complexity ‚úì | File size ‚úì | Commit standards ‚úì"
echo "   ‚Ä¢ üõ°Ô∏è Dependencies: Vulnerability scan ‚úì | License check ‚úì | Updates ‚úì"
echo ""
echo "üöÄ Ready to contribute to Ethiopia's financial future!"
echo ""
echo "üí° Tips for continued excellence:"
echo "   ‚Ä¢ Keep commits focused and atomic"
echo "   ‚Ä¢ Write descriptive commit messages"
echo "   ‚Ä¢ Review security implications of changes"
echo "   ‚Ä¢ Test thoroughly before pushing"
echo ""
echo "üìà Commit successful! Your contribution helps build a more secure financial ecosystem."
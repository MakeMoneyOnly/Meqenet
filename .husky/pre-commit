# Meqenet.et Pre-Commit Hook
# Enterprise-Grade FinTech Security & Quality Gate

echo "🚀 Meqenet.et Enterprise Pre-Commit Quality Checks"
echo "=================================================="

# Set NODE_OPTIONS to prevent memory issues
export NODE_OPTIONS="--max-old-space-size=4096"

# ============================================================================
# PHASE 1: BASIC QUALITY GATES
# ============================================================================

echo "📝 Phase 1: Running basic quality checks..."

# 1. Run lint-staged for staged files (formatting and linting)
echo "  • Code formatting and linting..."
pnpm exec lint-staged || {
  echo "❌ Code quality checks failed"
  echo ""
  echo "💡 Troubleshooting tips:"
  echo "   • For ESLint errors, run: pnpm eslint --fix <file>"
  echo "   • For formatting issues, run: pnpm prettier --write <file>"
  echo "   • If memory issues persist, try staging fewer files"
  echo ""
  exit 1
}

# ============================================================================
# PHASE 2: FINTECH SECURITY VALIDATION
# ============================================================================

echo "🔐 Phase 2: FinTech security validation..."

# 2. Secret Scanning - Critical for FinTech
echo "  • Scanning for hardcoded secrets..."
if ! pnpm run security:secrets >/dev/null 2>&1; then
  echo "❌ SECRET SCANNING FAILED!"
  echo ""
  echo "🚨 CRITICAL: Potential hardcoded secrets detected!"
  echo "   • API keys, passwords, or tokens may be exposed"
  echo "   • Review the output above and remove any sensitive data"
  echo "   • Use environment variables or secure vaults instead"
  echo ""
  exit 1
fi

# 3. Financial Logic Validation
echo "  • Validating financial logic integrity..."
STAGED_FILES=$(git diff --cached --name-only)

# Check for financial/payment related files
FINANCIAL_FILES=$(echo "$STAGED_FILES" | grep -E "(payment|credit|bnpl|financial|auth|loan|interest)" || true)
if [ -n "$FINANCIAL_FILES" ]; then
  echo "  • Financial code changes detected - validating critical patterns..."

  # Check for dangerous patterns in financial code (excluding legitimate Express middleware)
  if echo "$FINANCIAL_FILES" | xargs grep -l "eval(\|new Function\|setTimeout.*eval\|setInterval.*eval" 2>/dev/null; then
    echo "❌ CRITICAL: Dangerous code patterns detected in financial logic!"
    echo "   • eval() or dynamic code execution found"
    echo "   • This poses severe security risks in financial systems"
    exit 1
  fi

  # Check for proper error handling in financial code
  if echo "$FINANCIAL_FILES" | xargs grep -L "try.*catch\|throw.*Error\|reject.*Error" 2>/dev/null | grep -v ".test." | grep -v ".spec."; then
    echo "⚠️  WARNING: Financial code without proper error handling detected"
    echo "   • Financial operations must have comprehensive error handling"
    echo "   • Consider adding try-catch blocks or proper error boundaries"
  fi
fi

# ============================================================================
# PHASE 3: COMPLIANCE & REGULATORY CHECKS
# ============================================================================

echo "📋 Phase 3: Compliance and regulatory checks..."

# 4. NBE Compliance Validation
echo "  • NBE (Ethiopian Banking) compliance validation..."
if [ -n "$FINANCIAL_FILES" ]; then
  # Check for required compliance patterns
  if ! echo "$FINANCIAL_FILES" | xargs grep -l "audit\|compliance\|NBE" 2>/dev/null; then
    echo "⚠️  WARNING: Financial changes without explicit compliance documentation"
    echo "   • NBE requires audit trails for all financial transactions"
    echo "   • Consider adding compliance comments or audit logging"
  fi
fi

# 5. GDPR Compliance Check
echo "  • GDPR compliance validation..."
PERSONAL_DATA_FILES=$(echo "$STAGED_FILES" | grep -E "(user|customer|personal|profile|auth)" || true)
if [ -n "$PERSONAL_DATA_FILES" ]; then
  if ! echo "$PERSONAL_DATA_FILES" | xargs grep -l "consent\|privacy\|gdpr\|data.*protection" 2>/dev/null; then
    echo "⚠️  WARNING: Personal data handling without GDPR compliance markers"
    echo "   • User data changes require GDPR compliance documentation"
    echo "   • Ensure proper consent mechanisms and data protection"
  fi
fi

# ============================================================================
# PHASE 4: CODE QUALITY METRICS
# ============================================================================

echo "📊 Phase 4: Code quality metrics..."

# 6. Complexity Analysis
echo "  • Analyzing code complexity..."
COMPLEX_FILES=$(echo "$STAGED_FILES" | grep -E "\.(ts|tsx|js|jsx)$" | head -5)
if [ -n "$COMPLEX_FILES" ]; then
  # Check for overly complex functions (basic heuristic)
  COMPLEX_FUNCTIONS=$(echo "$COMPLEX_FILES" | xargs grep -n "function\|const.*=" | grep -A 50 -B 5 "{" | grep -c "{" | awk '$1 > 20 {print "Complex function detected"}' || true)
  if [ -n "$COMPLEX_FUNCTIONS" ]; then
    echo "⚠️  WARNING: Potential code complexity issues detected"
    echo "   • Functions with high cyclomatic complexity found"
    echo "   • Consider breaking down complex functions for maintainability"
  fi
fi

# ============================================================================
# PHASE 5: DEPENDENCY & SECURITY SCANNING
# ============================================================================

echo "🛡️  Phase 5: Dependency and security scanning..."

# 7. Dependency Vulnerability Check
echo "  • Checking for dependency vulnerabilities..."
if ! pnpm audit --audit-level moderate >/dev/null 2>&1; then
  echo "⚠️  WARNING: Dependency vulnerabilities detected"
  echo "   • Run 'pnpm audit' for detailed vulnerability information"
  echo "   • Consider updating vulnerable packages or applying patches"
fi

# ============================================================================
# PHASE 6: FINAL VALIDATION
# ============================================================================

echo "🎯 Phase 6: Final validation..."

# 8. Commit Message Validation
echo "  • Validating commit message format..."
COMMIT_MSG=$(git log -1 --pretty=%B)
if ! echo "$COMMIT_MSG" | grep -qE "^(feat|fix|docs|style|refactor|perf|test|chore|build|ci|security)(\(.+\))?: .+"; then
  echo "⚠️  WARNING: Commit message doesn't follow conventional format"
  echo "   • Use: type(scope): description"
  echo "   • Types: feat, fix, docs, style, refactor, perf, test, chore, build, ci, security"
  echo "   • Example: feat(auth): add biometric authentication"
fi

# 9. File Size Validation
echo "  • Validating file sizes..."
LARGE_FILES=$(git diff --cached --name-only | xargs ls -lh 2>/dev/null | awk '$5 > 10485760 {print $9 ": " $5}' || true)
if [ -n "$LARGE_FILES" ]; then
  echo "⚠️  WARNING: Large files detected in commit"
  echo "$LARGE_FILES"
  echo "   • Files larger than 10MB may cause repository bloat"
  echo "   • Consider using Git LFS for large binary files"
fi

# ============================================================================
# SUCCESS
# ============================================================================

echo ""
echo "✅ ALL ENTERPRISE PRE-COMMIT CHECKS PASSED!"
echo "🇪🇹 Meqenet.et maintains world-class FinTech security standards!"
echo ""
echo "🎉 Your code meets enterprise-grade quality requirements:"
echo "   • 🔐 Security vulnerabilities: CLEARED"
echo "   • 💰 Financial logic: VALIDATED"
echo "   • 📋 Compliance: VERIFIED"
echo "   • 📊 Code quality: APPROVED"
echo "   • 🛡️ Dependencies: SECURE"
echo ""
echo "🚀 Ready to contribute to Ethiopia's financial future!"
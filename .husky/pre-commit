#!/bin/sh
# Meqenet.et Pre-Commit Hook
# Enterprise-Grade FinTech Security & Quality Gate
# Manual lint-staged implementation to bypass Windows bugs.

# Exit immediately if a command exits with a non-zero status.
set -e

# ============================================================================
# PHASE 0: COMMIT MESSAGE VALIDATION (FIRST CHECK - IMMEDIATE EXIT)
# ============================================================================

# Get the commit message from the last commit
COMMIT_MSG=$(git log --oneline -1 | head -1 | cut -d' ' -f2-)

# Run commitlint validation FIRST - before any other processing
if ! echo "$COMMIT_MSG" | pnpm exec commitlint --verbose 2>&1; then
  echo "🚀 Meqenet.et Enterprise Pre-Commit Quality Checks (Manual Mode)"
  echo "=================================================="
  echo "❌ INVALID COMMIT MESSAGE FORMAT!"
  echo ""
  echo "🚨 Commit rejected due to non-conventional commit message."
  echo ""
  echo "📋 Required format:"
  echo "   type(scope): description (TICKET-123)"
  echo ""
  echo "✅ Valid types:"
  echo "   feat     - New feature"
  echo "   fix      - Bug fix"
  echo "   docs     - Documentation changes"
  echo "   style    - Code style changes (formatting, etc.)"
  echo "   refactor - Code refactoring"
  echo "   perf     - Performance improvements"
  echo "   test     - Test additions/modifications"
  echo "   chore    - Maintenance tasks"
  echo "   build    - Build system changes"
  echo "   ci       - CI/CD changes"
  echo "   security - Security-related changes"
  echo ""
  echo "📝 Examples:"
  echo "   feat(auth): add biometric authentication (JIRA-456)"
  echo "   fix(payment): resolve transaction timeout issue (TICKET-789)"
  echo "   security(auth): implement rate limiting (SEC-123)"
  echo "   ci(workflows): fix GitHub Actions linter errors (CI-456)"
  echo "   docs(api): update payment endpoint documentation (DOC-789)"
  echo ""
  echo "💡 Pro tip: Use 'git commit --amend' to fix the message"
  echo ""
  echo "🔒 COMMIT BLOCKED FOR ENTERPRISE COMPLIANCE"
  echo "   • Use proper conventional commit format"
  echo "   • Include Jira ticket reference: (TICKET-123)"
  echo "   • Contact development team for assistance: dev@meqenet.et"
  exit 1
fi

echo "🚀 Meqenet.et Enterprise Pre-Commit Quality Checks (Manual Mode)"
echo "=================================================="

# Set NODE_OPTIONS to prevent memory issues and enable better performance
export NODE_OPTIONS="--max-old-space-size=4096 --enable-source-maps=false"

echo "📝 Phase 0: Commit message validation passed."

# 1. Find all relevant staged files
ALL_RELEVANT_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep -E '\.(js|jsx|ts|tsx|json|md|yml|yaml)$' || true)

if [ -z "$ALL_RELEVANT_FILES" ]; then
    echo "No relevant files to check. Skipping hooks."
    exit 0
fi

STAGED_COUNT=$(echo "$ALL_RELEVANT_FILES" | wc -l)
echo "📊 Staged files to check: $STAGED_COUNT"

# ============================================================================
# PHASE 1: BASIC QUALITY GATES (Manual Implementation)
# ============================================================================
echo "📝 Phase 1: Running basic quality checks..."

# 1a. Filter for files that need linting
JS_TS_FILES=$(echo "$ALL_RELEVANT_FILES" | grep -E '\.(js|jsx|ts|tsx)$' || true)

# 1b. Run ESLint
if [ -n "$JS_TS_FILES" ]; then
  echo "  • Running ESLint on staged files..."
  pnpm lint:staged:eslint $JS_TS_FILES
  echo "  ✅ ESLint passed."
else
  echo "  • No JS/TS files to lint."
fi

# 1c. Run Prettier on all relevant files
echo "  • Running Prettier on staged files..."
pnpm lint:staged:prettier $ALL_RELEVANT_FILES
echo "  ✅ Prettier passed."

# 1d. Add back the changes made by the formatters
echo "  • Staging formatted files..."
git add $ALL_RELEVANT_FILES

# ============================================================================
# PHASE 2: ENTERPRISE SECURITY VALIDATION (Comprehensive)
# ============================================================================
echo "🔐 Phase 2: Running comprehensive enterprise security validation..."

# Enterprise-grade security scanning
echo "  • Running enterprise security scan..."
if ! pnpm run security:enterprise-scan 2>&1; then
  echo "❌ ENTERPRISE SECURITY SCAN FAILED!"
  exit 1
fi

# Supply chain security validation
echo "  • Running supply chain security checks..."
if ! pnpm run security:supply-chain 2>&1; then
  echo "❌ SUPPLY CHAIN SECURITY CHECKS FAILED!"
  exit 1
fi

# ============================================================================
# PHASE 3: COMPLIANCE & REGULATORY CHECKS
# ============================================================================
echo "📋 Phase 3: Running compliance and regulatory checks..."

# Ethiopian FinTech compliance validation
echo "  • Running Ethiopian FinTech compliance checks..."
if ! pnpm run validate:ethiopian-compliance 2>&1; then
  echo "❌ ETHIOPIAN COMPLIANCE CHECKS FAILED!"
  exit 1
fi

# Audit logging compliance
echo "  • Validating audit logging compliance..."
if ! pnpm run compliance:audit-logging 2>&1; then
  echo "❌ AUDIT LOGGING COMPLIANCE FAILED!"
  exit 1
fi

# Transaction security validation
echo "  • Validating transaction security..."
if ! pnpm run compliance:transaction-security 2>&1; then
  echo "❌ TRANSACTION SECURITY VALIDATION FAILED!"
  exit 1
fi

# ============================================================================
# PHASE 4: DEPENDENCY SECURITY AUDIT
# ============================================================================
echo "🔍 Phase 4: Running dependency security audit..."

# Comprehensive dependency audit
echo "  • Running comprehensive dependency audit..."
if ! pnpm run security:audit 2>&1; then
  echo "❌ DEPENDENCY AUDIT FAILED!"
  exit 1
fi

# ============================================================================
# PHASE 5: CODE QUALITY METRICS
# ============================================================================
echo "📊 Phase 5: Running code quality metrics..."

# TypeScript compilation check
echo "  • Running TypeScript compilation check..."
if ! pnpm run typecheck 2>&1; then
  echo "❌ TYPESCRIPT COMPILATION FAILED!"
  exit 1
fi

# ============================================================================
# SUCCESS
# ============================================================================

echo ""
echo "🎉 ALL ENTERPRISE PRE-COMMIT CHECKS PASSED!"
echo "✅ Code quality, security, compliance, and regulatory requirements met"
echo "🇪🇹 Ready to contribute to Ethiopia's financial future!"

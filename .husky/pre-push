#!/usr/bin/env bash
# Husky v10 no longer requires sourcing the internal _/husky.sh shim. The following shebang is sufficient.

# Meqenet.et Pre-Push Hook
# Comprehensive FinTech Security & Quality Gate

echo "🚀 Meqenet.et Pre-Push Comprehensive Checks"
echo "============================================="

# Get the current branch name
branch=$(git rev-parse --abbrev-ref HEAD)
echo "🌿 Current branch: $branch"

# Determine if matching remote branch exists
if ! git ls-remote --exit-code --heads origin "$branch" >/dev/null 2>&1; then
  echo "ℹ️  Remote branch origin/$branch does not exist yet (first push). Skipping diff-based compliance checks."
  REMOTE_BRANCH_EXISTS=false
else
  REMOTE_BRANCH_EXISTS=true
fi

# 1. Run all tests
echo "🧪 Running all tests..."
# Capture test output in a temporary file to show on failure
# Use cross-platform temporary file creation
if command -v mktemp >/dev/null 2>&1; then
  TEST_OUTPUT_FILE=$(mktemp)
else
  # Fallback for systems without mktemp (like some Windows bash environments)
  TEST_OUTPUT_FILE="/tmp/pre-push-test-output.$$"
  touch "$TEST_OUTPUT_FILE"
fi

# Set CI environment variable properly for cross-platform compatibility
export CI=true
if ! pnpm run test 2>&1 | tee "$TEST_OUTPUT_FILE"; then
  echo "❌ Tests failed! Cannot push to remote."
  echo ""
  echo "📋 Test Output (last 50 lines):"
  echo "=================================="
  tail -n 50 "$TEST_OUTPUT_FILE" 2>/dev/null || cat "$TEST_OUTPUT_FILE"
  echo "=================================="
  echo ""
  echo "💡 To run tests manually and see full output: pnpm test"
  echo "💡 To skip pre-push checks (emergency only): git push --no-verify"
  rm -f "$TEST_OUTPUT_FILE"
  exit 1
fi
rm -f "$TEST_OUTPUT_FILE"

# 2. Run Secret Scan
echo "🛡️  Running security scan for secrets..."
if ! pnpm run security:secrets 2>&1; then
    echo "❌ Secret scan failed! Hardcoded secrets may be present."
    echo "💡 Run 'pnpm run security:secrets' manually to see detailed output."
    exit 1
fi

# 3. Check for critical vulnerabilities in dependencies
echo "🔍 Checking for dependency vulnerabilities..."
if ! pnpm run security:audit 2>&1; then
  echo "❌ Dependency vulnerabilities found! Must be fixed before push."
  echo "💡 Run 'pnpm audit' for details or 'pnpm audit fix' to attempt auto-fix."
  exit 1
fi

# 4. Build check
echo "🏗️  Running build check..."
# Use cross-platform temporary file creation
if command -v mktemp >/dev/null 2>&1; then
  BUILD_OUTPUT_FILE=$(mktemp)
else
  # Fallback for systems without mktemp (like some Windows bash environments)
  BUILD_OUTPUT_FILE="/tmp/pre-push-build-output.$$"
  touch "$BUILD_OUTPUT_FILE"
fi

if ! pnpm run build 2>&1 | tee "$BUILD_OUTPUT_FILE"; then
  echo "❌ Build failed! Cannot push to remote."
  echo ""
  echo "📋 Build Output (last 30 lines):"
  echo "==============================="
  tail -n 30 "$BUILD_OUTPUT_FILE" 2>/dev/null || cat "$BUILD_OUTPUT_FILE"
  echo "==============================="
  echo ""
  echo "💡 To run build manually and see full output: pnpm run build"
  rm -f "$BUILD_OUTPUT_FILE"
  exit 1
fi
rm -f "$BUILD_OUTPUT_FILE"

# 5. Test Coverage Validation
echo "📊 Validating test coverage requirements..."
if ! timeout 30 pnpm run test:coverage >/dev/null 2>&1; then
  echo "❌ Test coverage validation failed!"
  echo "   • Minimum coverage thresholds not met"
  echo "   • Run 'pnpm run test:coverage' for detailed coverage report"
  echo "   • Critical financial code must maintain 90%+ coverage"
  exit 1
fi

# 6. Ethiopian FinTech specific checks
echo "🇪🇹 Running Ethiopian FinTech compliance checks..."

# Check for NBE compliance documentation
if [ "$branch" = "main" ] || [ "$branch" = "develop" ]; then
  echo "📋 Validating NBE compliance for protected branch..."
  if [ "$REMOTE_BRANCH_EXISTS" = true ]; then
    # Ensure financial logic has tests
    if git diff --name-only origin/$branch..HEAD | grep -q -E "^.+src/.+(payment|credit|bnpl|financial|auth).*\.(ts|js)$" > /dev/null; then
      echo "💰 Financial code changes detected - validating test coverage..."
      if ! git diff --name-only origin/$branch..HEAD | grep -E "(payment|credit|bnpl|financial|auth).*\.(test|spec)\.(ts|js)$" > /dev/null; then
        echo "❌ Financial code changes missing corresponding tests! Push rejected."
        exit 1
      fi
    fi
    # Check for Fayda ID integration changes
    if git diff --name-only origin/$branch..HEAD | xargs grep -l "fayda\|national.*id" 2>/dev/null; then
      echo "🆔 Fayda ID integration changes detected - validating security..."
      if ! git diff --name-only origin/$branch..HEAD | xargs grep -l "encrypt\|hash\|secure" 2>/dev/null; then
        echo "❌ Fayda ID changes missing encryption/security measures! Push rejected."
        exit 1
      fi
    fi
  fi
fi

# 6. Check for proper commit message format (if pushing to protected branches)
if [ "$branch" = "main" ] || [ "$branch" = "develop" ]; then
  echo "📝 Validating commit message format for protected branch..."
  last_commit_msg=$(git log -1 --pretty=%B)
  if ! echo "$last_commit_msg" | grep -qE "^(feat|fix|docs|style|refactor|perf|test|chore|build|ci|security)(\(.+\))?: .+"; then
    echo "⚠️  WARNING: Commit message doesn't follow conventional format!"
    echo "For protected branches, use: type(scope): description"
    echo "Types: feat, fix, docs, style, refactor, perf, test, chore, build, ci, security"
  fi
fi

# 7. Final dependency check
echo "📦 Final dependency validation..."
if ! pnpm install --no-frozen-lockfile --silent 2>&1; then
  echo "❌ Dependency installation failed!"
  echo "This indicates there are issues with package installation."
  echo "💡 Try running 'pnpm install' manually to see detailed error messages."
  echo "💡 Check if pnpm-lock.yaml is corrupted or if there are network issues."
  exit 1
fi

echo "✅ All pre-push checks passed!"
echo "🎉 Ready to push to Meqenet.et remote repository!"
echo "🇪🇹 Contributing to Ethiopia's financial future!"

plugins {
    id "com.android.application"
    id "org.jetbrains.kotlin.android"
    id "com.facebook.react"
}

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // In CI environment, React Native is installed at the frontend root level
    def rnDir = file("../../../../../node_modules/react-native")
    if (!rnDir.exists()) {
        // Fallback to local installation
        rnDir = file("../../../../node_modules/react-native")
    }
    if (!rnDir.exists()) {
        // Last resort - check if React Native Android files exist
        def rnAndroidDir = new File(rnDir, "ReactAndroid")
        if (!rnAndroidDir.exists()) {
            println "⚠️  WARNING: React Native Android directory not found at: ${rnAndroidDir.absolutePath}"
            println "⚠️  This may cause build failures. Please ensure React Native is properly installed."
        }
    }
    reactNativeDir = rnDir

    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    def codegenDirPath = file("../../../../../node_modules/@react-native/codegen")
    if (!codegenDirPath.exists()) {
        codegenDirPath = file("../../../../node_modules/@react-native/codegen")
    }
    codegenDir = codegenDirPath

    //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
    def cliFilePath = file("../../../../../node_modules/react-native/cli.js")
    if (!cliFilePath.exists()) {
        cliFilePath = file("../../../../node_modules/react-native/cli.js")
    }
    cliFile = cliFilePath

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    entryFile = file("../../src/main.tsx")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    hermesCommand = "../../../../node_modules/react-native/sdks/hermesc/%OS-BIN%/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Manual dependency configuration instead of autolinking */
    // React Native and related dependencies are declared in the dependencies block

    /* Autolinking configuration - Disabled for manual package management */
    // Note: Custom PackageList.java handles package registration manually
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = true

/**
 * Task to clean up autolinking generated files that conflict with our custom PackageList
 */
task cleanAutolinkingPackageList {
    doFirst {
        def generatedPackageList = file("${project.buildDir}/generated/autolinking/src/main/java/com/facebook/react/PackageList.java")
        if (generatedPackageList.exists()) {
            generatedPackageList.delete()
            println "✅ Deleted conflicting autolinking PackageList.java"
        }

        // Create a dummy autolinking.json file to prevent autolinking task failures
        def autolinkJson = file("${project.buildDir}/generated/autolinking/autolinking.json")
        if (!autolinkJson.exists()) {
            autolinkJson.getParentFile().mkdirs()
            autolinkJson.text = '{"empty": true}'
            println "✅ Created dummy autolinking.json to satisfy task requirements"
        }
    }
}

// Ensure cleanAutolinkingPackageList runs before any autolinking tasks
tasks.whenTaskAdded { task ->
    if (task.name.contains('Autolinking') || task.name.contains('autolinking')) {
        task.dependsOn cleanAutolinkingPackageList
    }
}

// Make sure our cleanup task runs before Java compilation
tasks.whenTaskAdded { task ->
    if (task.name.contains('compile') && task.name.contains('Java')) {
        task.dependsOn cleanAutolinkingPackageList
    }
}

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = io.github.react-native-community:jsc-android-intl:2026004.+`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
    ndkVersion = "29.0.13846066"
    buildToolsVersion = "36.0.0"
    compileSdkVersion = 35

    namespace = "com.app"
    defaultConfig {
        applicationId = "com.app"
        minSdkVersion = 24
        targetSdkVersion = 35
        versionCode = 1
        versionName = "1.0"
    }
    signingConfigs {
        debug {
            storeFile = file('debug.keystore')
            storePassword = 'android'
            keyAlias = 'androiddebugkey'
            keyPassword = 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig = signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig = signingConfigs.debug
            minifyEnabled = enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            // Enable shrinkResources for smaller APK size and better security
            shrinkResources = true
            // Enable zipAlign for better performance
            zipAlignEnabled = true
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    // Use project property for hermes configuration
    if (project.hasProperty('hermesEnabled') && project.property('hermesEnabled').toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

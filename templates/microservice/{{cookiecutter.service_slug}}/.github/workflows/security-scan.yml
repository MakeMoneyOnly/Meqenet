name: Security Scanning Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: "0 2 * * *"

env:
  NODE_VERSION: "{{cookiecutter.node_version}}"
  REGISTRY: ghcr.io
  IMAGE_NAME: meqenet/{{cookiecutter.service_slug}}

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "{{cookiecutter.node_version}}"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run Yarn Audit (FinTech Grade)
        run: |
          # High severity threshold for financial services
          yarn audit --level moderate --json > audit-results.json || true

      - name: Check for critical vulnerabilities
        run: |
          CRITICAL_COUNT=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
          HIGH_COUNT=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')

          echo "Critical vulnerabilities: $CRITICAL_COUNT"
          echo "High vulnerabilities: $HIGH_COUNT"

          # Fail if any critical vulnerabilities in FinTech context
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "❌ Critical vulnerabilities found - failing build for FinTech security"
            exit 1
          fi

          # Warn about high vulnerabilities
          if [ "$HIGH_COUNT" -gt 0 ]; then
            echo "⚠️ High severity vulnerabilities found - review required"
            echo "::warning::$HIGH_COUNT high severity vulnerabilities detected"
          fi

      - name: Snyk Vulnerability Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: "SNYK_TOKEN_PLACEHOLDER"
        with:
          args: --severity-threshold=high --fail-on=upgradable

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "{{cookiecutter.node_version}}"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run ESLint Security Plugin
        run: |
          yarn lint --format json --output-file eslint-results.json || true

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-extended

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/typescript
            p/nodejs
            p/fintech
        env:
          SEMGREP_APP_TOKEN: "SEMGREP_APP_TOKEN_PLACEHOLDER"

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: meqenet/{{cookiecutter.service_slug}}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: meqenet/{{cookiecutter.service_slug}}:latest
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Check for critical container vulnerabilities
        run: |
          CRITICAL_COUNT=$(cat trivy-results.sarif | jq '.runs[0].results | map(select(.level == "error")) | length')
          echo "Critical container vulnerabilities: $CRITICAL_COUNT"

          # Fail on any critical vulnerabilities in containers
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "❌ Critical container vulnerabilities found"
            exit 1
          fi

  ethiopian-compliance-check:
    name: Ethiopian FinTech Compliance Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "{{cookiecutter.node_version}}"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Check NBE Compliance Requirements
        run: |
          echo "🇪🇹 Checking Ethiopian FinTech compliance requirements..."

          # Check for required NBE compliance configurations
          if ! grep -r "NBE_INSTITUTION_CODE" . --include="*.ts" --include="*.js" --include="*.json"; then
            echo "⚠️ NBE institution code configuration not found"
          fi

          # Check for Fayda ID encryption
          if ! grep -r "FAYDA_ENCRYPTION" . --include="*.ts" --include="*.js"; then
            echo "⚠️ Fayda ID encryption configuration not found"
          fi

          # Check for Ethiopian payment providers
          PROVIDERS=("telebirr" "mpesa" "cbebirr" "hellocash")
          for provider in "${PROVIDERS[@]}"; do
            if grep -r "$provider" . --include="*.ts" --include="*.js" > /dev/null; then
              echo "✅ $provider integration detected"
            fi
          done

          # Check for Amharic localization
          if [ -d "src/i18n" ] && [ -f "src/i18n/am.json" ]; then
            echo "✅ Amharic localization found"
          else
            echo "⚠️ Amharic localization not implemented"
          fi

      - name: Validate Ethiopian Currency Handling
        run: |
          echo "💱 Validating ETB currency handling..."

          # Check for proper ETB decimal handling (2 decimal places)
          if grep -r "toFixed(2)" . --include="*.ts" --include="*.js"; then
            echo "✅ ETB decimal precision handling found"
          else
            echo "⚠️ ETB decimal precision handling not implemented"
          fi

          # Check for currency conversion utilities
          if grep -r "ETB" . --include="*.ts" --include="*.js"; then
            echo "✅ ETB currency handling detected"
          else
            echo "⚠️ ETB currency handling not found"
          fi

  security-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs:
      [dependency-scan, sast-scan, container-scan, ethiopian-compliance-check]
    if: always()

    steps:
      - name: Security Scan Summary
        run: |
          echo "🔒 Security Scan Summary for {{cookiecutter.service_name}}"
          echo "=============================================="
          echo "📦 Dependency Scan: Completed"
          echo "🔍 SAST Scan: Completed"
          echo "🐳 Container Scan: Completed"
          echo "🇪🇹 Ethiopian Compliance: Completed"
          echo "✅ All security scans executed"

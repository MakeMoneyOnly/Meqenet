{
  "name": "@meqenet/auth-service",
  "version": "1.0.0",
  "description": "Authentication and authorization microservice",
  "author": "Meqenet Developer <dev@meqenet.et>",
  "private": true,
  "license": "UNLICENSED",
  "engines": {
    "node": ">=18.19.0"
  },
  "scripts": {
    "build": "nest build",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "start": "nest start",
    "start:dev": "nest start --watch",
    "start:debug": "nest start --debug --watch",
    "start:prod": "node dist/main",
    "lint": "cross-env NODE_NO_WARNINGS=1 eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
    "lint:check": "eslint \"{src,apps,libs,test}/**/*.ts\"",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "jest --config ./test/jest-e2e.json",
    "test:integration": "jest --config ./test/jest-integration.json",
    "db:generate": "prisma generate",
    "db:push": "prisma db push",
    "db:migrate": "prisma migrate dev",
    "db:studio": "prisma studio",
    "db:seed": "ts-node prisma/seed.ts",
    "db:reset": "prisma migrate reset --force",
    "proto:generate": "protoc --plugin=protoc-gen-ts_proto=./node_modules/.bin/protoc-gen-ts_proto --ts_proto_out=src/generated --ts_proto_opt=nestJs=true --proto_path=proto proto/*.proto",
    "security:licenses": "pnpm licenses list --json | node -e 'const fs = require(\"fs\"); const licenses = JSON.parse(fs.readFileSync(0)); const forbidden = [\"GPL\", \"LGPL\", \"AGPL\", \"MS-PL\"]; const forbiddenUsed = Object.keys(licenses).filter(l => forbidden.includes(l)); if (forbiddenUsed.length > 0) { console.error(\"Forbidden licenses found:\", forbiddenUsed); process.exit(1); } const deprecated = [\"boolean\", \"read-package-json\"]; const allDeps = Object.values(licenses).flat(); const deprecatedUsed = allDeps.filter(d => deprecated.includes(d.name)); if (deprecatedUsed.length > 0) { console.error(\"Deprecated packages found:\", deprecatedUsed.map(d=>d.name)); process.exit(1); }'",
    "docker:build": "docker build -t auth-service .",
    "docker:run": "docker run -p 3001:3001 auth-service",
    "security:audit": "pnpm audit --level moderate",
    "security:check": "snyk test"
  }
}

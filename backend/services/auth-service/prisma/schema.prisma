generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum KycStatus {
  PENDING
  IN_PROGRESS
  APPROVED
  REJECTED
  EXPIRED
  SUSPENDED
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  BANNED
  PENDING
  DELETED
}

enum UserRole {
  CUSTOMER
  MERCHANT
  ADMIN
  COMPLIANCE
  SUPPORT
  DEVELOPER
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model User {
  /// @classification: Internal
  id              String      @id @default(cuid())
  /// @classification: PII
  email           String      @unique
  /// @classification: Internal
  emailVerified   Boolean     @default(false)
  /// @classification: Internal
  emailVerifiedAt DateTime?
  /// @classification: Sensitive
  passwordHash    String
  /// @classification: PII
  firstName       String?
  /// @classification: PII
  lastName        String?
  /// @classification: PII
  displayName     String?
  /// @classification: PII
  phone           String?
  /// @classification: Internal
  phoneVerified   Boolean     @default(false)
  /// @classification: Internal
  phoneVerifiedAt DateTime?
  /// @classification: Internal
  preferredLanguage String    @default("en")
  /// @classification: Internal
  timezone        String      @default("Africa/Addis_Ababa")
  /// @classification: Internal
  kycStatus       KycStatus   @default(PENDING)
  /// @classification: Internal
  kycCompletedAt  DateTime?
  /// @classification: Sensitive @encrypted
  faydaIdHash     Bytes?     @unique
  /// @classification: Internal
  kycDocuments    Json?
  /// @classification: Internal
  status          UserStatus  @default(ACTIVE)
  /// @classification: Internal
  role            UserRole    @default(CUSTOMER)
  /// @classification: Internal
  lastLoginAt     DateTime?
  /// @classification: Internal
  lastLoginIp     String?
  /// @classification: Internal
  loginAttempts   Int         @default(0)
  /// @classification: Internal
  lockoutUntil    DateTime?
  /// @classification: Internal
  twoFactorEnabled Boolean    @default(false)
  /// @classification: Sensitive
  twoFactorSecret String?
  /// @classification: Internal
  riskLevel       RiskLevel   @default(LOW)
  /// @classification: Internal
  riskScore       Float?
  /// @classification: Internal
  riskAssessedAt  DateTime?
  /// @classification: Internal
  dataClassification String   @default("CONFIDENTIAL")
  /// @classification: Internal
  retentionPolicy String      @default("ACTIVE_USER")
  /// @classification: Internal
  gdprConsent     Boolean     @default(false)
  /// @classification: Internal
  marketingConsent Boolean    @default(false)
  /// @classification: Internal
  createdAt       DateTime    @default(now())
  /// @classification: Internal
  updatedAt       DateTime    @updatedAt
  /// @classification: Internal
  deletedAt       DateTime?
  credential      Credential?
  /// @classification: Internal
  credentialId    String?     @unique
  roles           Role[]      @relation
  profile         Profile?
  sessions        UserSession[]
  passwordResets  PasswordReset[]
}

model Credential {
  /// @classification: Internal
  id           String @id @default(cuid())
  /// @classification: Sensitive
  hashedPassword String
  user         User   @relation(fields: [userId], references: [id])
  /// @classification: Internal
  userId       String @unique
}

model Profile {
  /// @classification: Internal
  id        String  @id @default(cuid())
  /// @classification: PII
  bio       String?
  /// @classification: Confidential
  faydaId   String? @unique // For eKYC
  /// @classification: Internal
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id])
}

model Role {
  id     String @id @default(cuid())
  name   String @unique
  users  User[] @relation
}

model UserSession {
  /// @classification: Internal
  id             String   @id @default(cuid())
  /// @classification: Internal
  userId         String
  /// @classification: Sensitive
  token          String   @unique
  /// @classification: Sensitive
  refreshToken   String?  @unique
  /// @classification: Internal
  deviceId       String?
  /// @classification: Internal
  ipAddress      String
  /// @classification: Internal
  userAgent      String?
  /// @classification: Internal
  location       String?
  /// @classification: Internal
  isActive       Boolean  @default(true)
  /// @classification: Internal
  expiresAt      DateTime
  /// @classification: Internal
  lastActivityAt DateTime @default(now())
  /// @classification: Internal
  isSecure       Boolean  @default(true)
  /// @classification: Internal
  riskFlags      String[]
  /// @classification: Internal
  createdAt      DateTime @default(now())
  /// @classification: Internal
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordReset {
  /// @classification: Internal
  id         String   @id @default(cuid())
  /// @classification: Internal
  userId     String
  /// @classification: Sensitive
  token      String   @unique
  /// @classification: Sensitive
  hashedToken String
  /// @classification: Internal
  ipAddress  String
  /// @classification: Internal
  userAgent  String?
  /// @classification: Internal
  isUsed     Boolean  @default(false)
  /// @classification: Internal
  usedAt     DateTime?
  /// @classification: Internal
  expiresAt  DateTime
  /// @classification: Internal
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OutboxMessage {
  /// @classification: Internal
  id             String   @id @default(cuid())
  /// @classification: Internal
  messageId      String   @unique
  /// @classification: Internal
  aggregateType  String
  /// @classification: Internal
  aggregateId    String
  /// @classification: Internal
  eventType      String
  /// @classification: Confidential
  payload        Json
  /// @classification: Internal
  metadata       Json?
  /// @classification: Internal
  status         String   @default("PENDING")
  /// @classification: Internal
  retryCount     Int      @default(0)
  /// @classification: Internal
  maxRetries     Int      @default(3)
  /// @classification: Internal
  errorMessage   String?
  /// @classification: Internal
  nextRetryAt    DateTime?
  /// @classification: Internal
  createdAt      DateTime @default(now())
  /// @classification: Internal
  processedAt    DateTime?
  /// @classification: Internal
  dlqAt          DateTime?
  /// @classification: Internal
  dlqReason      String?
}

model AuditLog {
  /// @classification: Internal
  id                  String   @id @default(cuid())
  /// @classification: Internal
  eventType           String
  /// @classification: Internal
  entityType          String
  /// @classification: Internal
  entityId            String?
  /// @classification: Internal
  userId              String?
  /// @classification: PII
  userEmail           String?
  /// @classification: Internal
  userRole            String?
  /// @classification: PII
  ipAddress           String
  /// @classification: Internal
  userAgent           String?
  /// @classification: Internal
  sessionId           String?
  /// @classification: Internal
  location            String?
  /// @classification: Internal
  deviceFingerprint   String?
  /// @classification: Confidential
  eventData           Json?
  /// @classification: Confidential
  previousValues      Json?
  /// @classification: Confidential
  newValues           Json?
  /// @classification: Internal
  riskScore           Float?
  /// @classification: Internal
  complianceFlags     String[]
  /// @classification: Internal
  createdAt           DateTime @default(now())
}
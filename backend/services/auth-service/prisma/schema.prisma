generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum KycStatus {
  PENDING
  IN_PROGRESS
  APPROVED
  REJECTED
  EXPIRED
  SUSPENDED
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  BANNED
  PENDING
  DELETED
}

enum UserRole {
  CUSTOMER
  MERCHANT
  ADMIN
  COMPLIANCE
  SUPPORT
  DEVELOPER
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model User {
  /// @classification: Internal
  id                 String          @id @default(cuid())
  /// @classification: PII
  email              String          @unique
  /// @classification: Internal
  emailVerified      Boolean         @default(false)
  /// @classification: Internal
  emailVerifiedAt    DateTime?
  /// @classification: Sensitive
  passwordHash       String
  /// @classification: PII
  firstName          String?
  /// @classification: PII
  lastName           String?
  /// @classification: PII
  displayName        String?
  /// @classification: PII
  phone              String?
  /// @classification: Internal
  phoneVerified      Boolean         @default(false)
  /// @classification: Internal
  phoneVerifiedAt    DateTime?
  /// @classification: Internal
  phoneUpdatedAt     DateTime?
  /// @classification: Sensitive @encrypted
  phoneChangeCoolingPeriodEnd DateTime?
  /// @classification: Internal
  preferredLanguage  String          @default("en")
  /// @classification: Internal
  timezone           String          @default("Africa/Addis_Ababa")
  /// @classification: Internal
  kycStatus          KycStatus       @default(PENDING)
  /// @classification: Internal
  kycCompletedAt     DateTime?
  /// @classification: Sensitive @encrypted
  faydaIdHash        Bytes?          @unique
  /// @classification: Internal
  kycDocuments       Json?
  /// @classification: Internal
  status             UserStatus      @default(ACTIVE)
  /// @classification: Internal
  role               UserRole        @default(CUSTOMER)
  /// @classification: Internal
  lastLoginAt        DateTime?
  /// @classification: Internal
  lastLoginIp        String?
  /// @classification: Internal
  loginAttempts      Int             @default(0)
  /// @classification: Internal
  lockoutUntil       DateTime?
  /// @classification: Internal
  twoFactorEnabled   Boolean         @default(false)
  /// @classification: Sensitive
  twoFactorSecret    String?
  /// @classification: Internal
  riskLevel          RiskLevel       @default(LOW)
  /// @classification: Internal
  riskScore          Float?
  /// @classification: Internal
  riskAssessedAt     DateTime?
  /// @classification: Internal
  dataClassification String          @default("CONFIDENTIAL")
  /// @classification: Internal
  retentionPolicy    String          @default("ACTIVE_USER")
  /// @classification: Internal
  gdprConsent        Boolean         @default(false)
  /// @classification: Internal
  marketingConsent   Boolean         @default(false)
  /// @classification: Internal
  createdAt          DateTime        @default(now())
  /// @classification: Internal
  updatedAt          DateTime        @updatedAt
  /// @classification: Internal
  deletedAt          DateTime?
  credential         Credential?
  /// @classification: Internal
  credentialId       String?         @unique
  roles              Role[]          @relation
  profile            Profile?
  sessions           UserSession[]
  passwordResets     PasswordReset[]

  // OAuth 2.0 Relations
  oauthClients       OAuthClient[]
  oauthAuthCodes     OAuthAuthorizationCode[]
  oauthAccessTokens  OAuthAccessToken[]
  oauthRefreshTokens OAuthRefreshToken[]
}

model Credential {
  /// @classification: Internal
  id             String @id @default(cuid())
  /// @classification: Sensitive
  hashedPassword String
  user           User   @relation(fields: [userId], references: [id])
  /// @classification: Internal
  userId         String @unique
}

model Profile {
  /// @classification: Internal
  id      String  @id @default(cuid())
  /// @classification: PII
  bio     String?
  /// @classification: Confidential
  faydaId String? @unique // For eKYC
  /// @classification: Internal
  userId  String  @unique
  user    User    @relation(fields: [userId], references: [id])
}

model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[] @relation
}

model UserSession {
  /// @classification: Internal
  id             String   @id @default(cuid())
  /// @classification: Internal
  userId         String
  /// @classification: Sensitive
  token          String   @unique
  /// @classification: Sensitive
  refreshToken   String?  @unique
  /// @classification: Internal
  deviceId       String?
  /// @classification: Internal
  ipAddress      String
  /// @classification: Internal
  userAgent      String?
  /// @classification: Internal
  location       String?
  /// @classification: Internal
  isActive       Boolean  @default(true)
  /// @classification: Internal
  expiresAt      DateTime
  /// @classification: Internal
  lastActivityAt DateTime @default(now())
  /// @classification: Internal
  isSecure       Boolean  @default(true)
  /// @classification: Internal
  riskFlags      String[]
  /// @classification: Internal
  createdAt      DateTime @default(now())
  /// @classification: Internal
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordReset {
  /// @classification: Internal
  id          String    @id @default(cuid())
  /// @classification: Internal
  userId      String
  /// @classification: Sensitive
  token       String    @unique
  /// @classification: Sensitive
  hashedToken String
  /// @classification: Internal
  ipAddress   String
  /// @classification: Internal
  userAgent   String?
  /// @classification: Internal
  isUsed      Boolean   @default(false)
  /// @classification: Internal
  usedAt      DateTime?
  /// @classification: Internal
  expiresAt   DateTime
  /// @classification: Internal
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OutboxMessage {
  /// @classification: Internal
  id            String    @id @default(cuid())
  /// @classification: Internal
  messageId     String    @unique
  /// @classification: Internal
  aggregateType String
  /// @classification: Internal
  aggregateId   String
  /// @classification: Internal
  eventType     String
  /// @classification: Confidential
  payload       Json
  /// @classification: Internal
  metadata      Json?
  /// @classification: Internal
  status        String    @default("PENDING")
  /// @classification: Internal
  retryCount    Int       @default(0)
  /// @classification: Internal
  maxRetries    Int       @default(3)
  /// @classification: Internal
  errorMessage  String?
  /// @classification: Internal
  nextRetryAt   DateTime?
  /// @classification: Internal
  createdAt     DateTime  @default(now())
  /// @classification: Internal
  processedAt   DateTime?
  /// @classification: Internal
  dlqAt         DateTime?
  /// @classification: Internal
  dlqReason     String?
}

model AuditLog {
  /// @classification: Internal
  id                String   @id @default(cuid())
  /// @classification: Internal
  eventType         String
  /// @classification: Internal
  entityType        String
  /// @classification: Internal
  entityId          String?
  /// @classification: Internal
  userId            String?
  /// @classification: PII
  userEmail         String?
  /// @classification: Internal
  userRole          String?
  /// @classification: PII
  ipAddress         String
  /// @classification: Internal
  userAgent         String?
  /// @classification: Internal
  sessionId         String?
  /// @classification: Internal
  location          String?
  /// @classification: Internal
  deviceFingerprint String?
  /// @classification: Confidential
  eventData         Json?
  /// @classification: Confidential
  previousValues    Json?
  /// @classification: Confidential
  newValues         Json?
  /// @classification: Internal
  riskScore         Float?
  /// @classification: Internal
  complianceFlags   String[]
  /// @classification: Internal
  createdAt         DateTime @default(now())
}

// OAuth 2.0 Models for Third-Party Integrations
model OAuthClient {
  /// @classification: Internal
  id                      String    @id @default(cuid())
  /// @classification: Sensitive
  clientId                String    @unique
  /// @classification: Sensitive
  clientSecret            String
  /// @classification: Internal
  clientName              String
  /// @classification: Internal
  clientDescription       String?
  /// @classification: Internal
  redirectUris            String[] // Array of allowed redirect URIs
  /// @classification: Internal
  grantTypes              String[] // authorization_code, refresh_token, etc.
  /// @classification: Internal
  responseTypes           String[] // code, token, id_token
  /// @classification: Internal
  scopes                  String[] // openid, profile, email, etc.
  /// @classification: Internal
  tokenEndpointAuthMethod String    @default("client_secret_basic")
  /// @classification: Internal
  ownerId                 String // User who owns this client
  /// @classification: Internal
  status                  String    @default("active") // active, inactive, suspended
  /// @classification: Internal
  createdAt               DateTime  @default(now())
  /// @classification: Internal
  updatedAt               DateTime  @updatedAt
  /// @classification: Internal
  deletedAt               DateTime?

  // Relations
  authorizationCodes OAuthAuthorizationCode[]
  accessTokens       OAuthAccessToken[]
  refreshTokens      OAuthRefreshToken[]
  owner              User                     @relation(fields: [ownerId], references: [id])
}

model OAuthAuthorizationCode {
  /// @classification: Internal
  id                  String   @id @default(cuid())
  /// @classification: Sensitive
  code                String   @unique
  /// @classification: Sensitive
  codeChallenge       String? // PKCE code challenge
  /// @classification: Internal
  codeChallengeMethod String? // S256, plain
  /// @classification: Internal
  clientId            String
  /// @classification: Internal
  userId              String
  /// @classification: Internal
  redirectUri         String
  /// @classification: Internal
  scopes              String[]
  /// @classification: Internal
  expiresAt           DateTime
  /// @classification: Internal
  used                Boolean  @default(false)
  /// @classification: Internal
  createdAt           DateTime @default(now())

  // Relations
  client OAuthClient @relation(fields: [clientId], references: [id])
  user   User        @relation(fields: [userId], references: [id])
}

model OAuthAccessToken {
  /// @classification: Internal
  id         String    @id @default(cuid())
  /// @classification: Sensitive
  token      String    @unique
  /// @classification: Internal
  tokenType  String    @default("Bearer")
  /// @classification: Internal
  clientId   String
  /// @classification: Internal
  userId     String
  /// @classification: Internal
  scopes     String[]
  /// @classification: Internal
  expiresAt  DateTime
  /// @classification: Internal
  revoked    Boolean   @default(false)
  /// @classification: Internal
  createdAt  DateTime  @default(now())
  /// @classification: Internal
  lastUsedAt DateTime?

  // Relations
  client       OAuthClient        @relation(fields: [clientId], references: [id])
  user         User               @relation(fields: [userId], references: [id])
  refreshToken OAuthRefreshToken?
}

model OAuthRefreshToken {
  /// @classification: Internal
  id         String    @id @default(cuid())
  /// @classification: Sensitive
  token      String    @unique
  /// @classification: Internal
  clientId   String
  /// @classification: Internal
  userId     String
  /// @classification: Internal
  scopes     String[]
  /// @classification: Internal
  expiresAt  DateTime
  /// @classification: Internal
  revoked    Boolean   @default(false)
  /// @classification: Internal
  createdAt  DateTime  @default(now())
  /// @classification: Internal
  lastUsedAt DateTime?
  /// @classification: Internal
  revokedAt  DateTime?
  /// @classification: Internal
  rotatedAt  DateTime?
  /// @classification: Internal
  rotatedToTokenId String?
  familyId         String? // Used to chain rotated tokens together for security invalidation

  // Relations
  client OAuthClient @relation(fields: [clientId], references: [id])
  user   User        @relation(fields: [userId], references: [id])

  // One-to-one relation with access token
  accessTokenId String?           @unique
  accessToken   OAuthAccessToken? @relation(fields: [accessTokenId], references: [id])

  // Self-referencing relation for token rotation tracking
  rotatedToToken   OAuthRefreshToken?  @relation("TokenRotation", fields: [rotatedToTokenId], references: [id])
  rotatedFromToken OAuthRefreshToken[] @relation("TokenRotation")

  @@index([revokedAt])
  @@index([rotatedToTokenId])
  @@index([familyId])
}

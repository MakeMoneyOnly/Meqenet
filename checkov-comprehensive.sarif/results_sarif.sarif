{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/main/sarif-2.1/schema/sarif-schema-2.1.0.json", "version": "2.1.0", "runs": [{"tool": {"driver": {"name": "Checkov", "version": "3.2.469", "informationUri": "https://checkov.io", "rules": [{"id": "CKV_AWS_272", "name": "Ensure AWS Lambda function is configured to validate code-signing", "shortDescription": {"text": "Ensure AWS Lambda function is configured to validate code-signing"}, "fullDescription": {"text": "Ensure AWS Lambda function is configured to validate code-signing"}, "help": {"text": "Ensure AWS Lambda function is configured to validate code-signing\nResource: aws_lambda_function.key_rotation"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-272"}, {"id": "CKV_AWS_23", "name": "Ensure every security group and rule has a description", "shortDescription": {"text": "Ensure every security group and rule has a description"}, "fullDescription": {"text": "Ensure every security group and rule has a description"}, "help": {"text": "Ensure every security group and rule has a description\nResource: aws_security_group.lambda"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/networking-31"}, {"id": "CKV_AWS_382", "name": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1", "shortDescription": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1"}, "fullDescription": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1"}, "help": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1\nResource: aws_security_group.lambda"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/bc-aws-382"}, {"id": "CKV2_AWS_76", "name": "Ensure AWS ALB attached WAFv2 WebACL is configured with AMR for Log4j Vulnerability", "shortDescription": {"text": "Ensure AWS ALB attached WAFv2 WebACL is configured with AMR for Log4j Vulnerability"}, "fullDescription": {"text": "Ensure AWS ALB attached WAFv2 WebACL is configured with AMR for Log4j Vulnerability"}, "help": {"text": "Ensure AWS ALB attached WAFv2 WebACL is configured with AMR for Log4j Vulnerability\nResource: aws_lb.main"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV2_AWS_31", "name": "Ensure WAF2 has a Logging Configuration", "shortDescription": {"text": "Ensure WAF2 has a Logging Configuration"}, "fullDescription": {"text": "Ensure WAF2 has a Logging Configuration"}, "help": {"text": "Ensure WAF2 has a Logging Configuration\nResource: aws_wafv2_web_acl.alb"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/bc-aws-logging-33"}], "organization": "bridgecrew"}}, "results": [{"ruleId": "CKV_AWS_272", "ruleIndex": 0, "level": "error", "attachments": [], "message": {"text": "Ensure AWS Lambda function is configured to validate code-signing"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "infrastructure/key-rotation.tf"}, "region": {"startLine": 119, "endLine": 173, "snippet": {"text": "resource \"aws_lambda_function\" \"key_rotation\" {\n  filename         = data.archive_file.key_rotation_lambda_zip.output_path\n  function_name    = \"meqenet-key-rotation\"\n  role            = aws_iam_role.key_rotation_lambda_role.arn\n  handler         = \"index.handler\"\n  runtime         = \"nodejs18.x\"\n  timeout         = 300\n  memory_size     = 256\n\n  # Fix CKV_AWS_173 - Encrypt environment variables with KMS\n  kms_key_arn = aws_kms_key.secrets.arn\n\n  environment {\n    variables = {\n      AWS_REGION                    = var.aws_region\n      KEY_ROTATION_INTERVAL_DAYS    = var.key_rotation_interval_days\n      MAX_ACTIVE_KEYS              = var.max_active_keys\n      KEY_PREFIX                   = var.key_prefix\n      LOG_LEVEL                    = var.log_level\n      ALERT_SNS_TOPIC_ARN         = aws_sns_topic.key_rotation_alerts.arn\n    }\n  }\n\n  # Fix CKV_AWS_117 - Configure Lambda inside VPC for security\n  vpc_config {\n    subnet_ids         = [aws_subnet.private_a.id, aws_subnet.private_b.id]\n    security_group_ids = [aws_security_group.lambda.id]\n  }\n\n  # Fix CKV_AWS_116 - Add Dead Letter Queue (DLQ)\n  dead_letter_config {\n    target_arn = aws_sqs_queue.key_rotation_dlq.arn\n  }\n\n  # Fix CKV_AWS_50 - Enable X-Ray tracing\n  tracing_config {\n    mode = \"Active\"\n  }\n\n  # Fix CKV_AWS_115 - Set concurrent execution limit\n  reserved_concurrent_executions = 5\n\n  tags = {\n    Name        = \"meqenet-key-rotation-lambda\"\n    Environment = var.environment\n    Service     = \"auth-service\"\n    Purpose     = \"security-key-rotation\"\n  }\n\n  depends_on = [\n    aws_iam_role_policy.key_rotation_lambda_policy,\n    aws_cloudwatch_log_group.key_rotation_lambda_logs,\n    aws_sqs_queue.key_rotation_dlq\n  ]\n}\n"}}}}]}, {"ruleId": "CKV_AWS_23", "ruleIndex": 1, "level": "error", "attachments": [], "message": {"text": "Ensure every security group and rule has a description"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "infrastructure/key-rotation.tf"}, "region": {"startLine": 208, "endLine": 226, "snippet": {"text": "resource \"aws_security_group\" \"lambda\" {\n  name_prefix = \"meqenet-lambda-\"\n  vpc_id      = aws_vpc.main.id\n\n  # Fix CKV_AWS_23 - Add descriptions to security group rules\n  egress {\n    description = \"Allow all outbound traffic\"\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  tags = {\n    Name        = \"meqenet-lambda-sg\"\n    Environment = var.environment\n    Service     = \"lambda\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_382", "ruleIndex": 2, "level": "error", "attachments": [], "message": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "infrastructure/key-rotation.tf"}, "region": {"startLine": 208, "endLine": 226, "snippet": {"text": "resource \"aws_security_group\" \"lambda\" {\n  name_prefix = \"meqenet-lambda-\"\n  vpc_id      = aws_vpc.main.id\n\n  # Fix CKV_AWS_23 - Add descriptions to security group rules\n  egress {\n    description = \"Allow all outbound traffic\"\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  tags = {\n    Name        = \"meqenet-lambda-sg\"\n    Environment = var.environment\n    Service     = \"lambda\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_76", "ruleIndex": 3, "level": "error", "attachments": [], "message": {"text": "Ensure AWS ALB attached WAFv2 WebACL is configured with AMR for Log4j Vulnerability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "infrastructure/load_balancer.tf"}, "region": {"startLine": 246, "endLine": 271, "snippet": {"text": "resource \"aws_lb\" \"main\" {\n  name               = \"meqenet-main-alb\"\n  internal           = false\n  load_balancer_type = \"application\"\n  security_groups    = [aws_security_group.alb.id]\n  subnets            = [aws_subnet.public_a.id, aws_subnet.public_b.id]\n\n  enable_deletion_protection = true\n\n  # Fix CKV_AWS_91 - Enable access logging\n  access_logs {\n    bucket  = aws_s3_bucket.alb_logs.id\n    enabled = true\n    prefix  = \"alb-logs\"\n  }\n\n  # Fix CKV_AWS_131 - Drop invalid HTTP headers\n  drop_invalid_header_fields = true\n\n  # Fix CKV_AWS_328 - Defensive desync mitigation mode (already satisfied by default)\n  desync_mitigation_mode = \"defensive\"\n\n  tags = {\n    Name = \"meqenet-main-alb\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_31", "ruleIndex": 4, "level": "error", "attachments": [], "message": {"text": "Ensure WAF2 has a Logging Configuration"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "infrastructure/load_balancer.tf"}, "region": {"startLine": 274, "endLine": 414, "snippet": {"text": "resource \"aws_wafv2_web_acl\" \"alb\" {\n  name        = \"meqenet-alb-waf\"\n  description = \"WAF for ALB with Log4j vulnerability protection\"\n  scope       = \"REGIONAL\"\n\n  default_action {\n    allow {}\n  }\n\n  # AWSManagedRulesCommonRuleSet - Common web exploits\n  rule {\n    name     = \"AWSManagedRulesCommonRuleSet\"\n    priority = 1\n\n    override_action {\n      none {}\n    }\n\n    statement {\n      managed_rule_group_statement {\n        name        = \"AWSManagedRulesCommonRuleSet\"\n        vendor_name = \"AWS\"\n      }\n    }\n\n    visibility_config {\n      cloudwatch_metrics_enabled = true\n      metric_name                = \"AWSManagedRulesCommonRuleSet\"\n      sampled_requests_enabled   = true\n    }\n  }\n\n  # AWSManagedRulesKnownBadInputsRuleSet - Known bad inputs\n  rule {\n    name     = \"AWSManagedRulesKnownBadInputsRuleSet\"\n    priority = 2\n\n    override_action {\n      none {}\n    }\n\n    statement {\n      managed_rule_group_statement {\n        name        = \"AWSManagedRulesKnownBadInputsRuleSet\"\n        vendor_name = \"AWS\"\n      }\n    }\n\n    visibility_config {\n      cloudwatch_metrics_enabled = true\n      metric_name                = \"AWSManagedRulesKnownBadInputsRuleSet\"\n      sampled_requests_enabled   = true\n    }\n  }\n\n  # Fix CKV2_AWS_76 - Log4j vulnerability protection with Bot Control\n  rule {\n    name     = \"AWSManagedRulesBotControlRuleSet\"\n    priority = 3\n\n    override_action {\n      none {}\n    }\n\n    statement {\n      managed_rule_group_statement {\n        name        = \"AWSManagedRulesBotControlRuleSet\"\n        vendor_name = \"AWS\"\n        # Enable targeted inspection level for better Log4j protection\n        managed_rule_group_configs {\n          aws_managed_rules_bot_control_rule_set {\n            inspection_level = \"TARGETED\"\n          }\n        }\n      }\n    }\n\n    visibility_config {\n      cloudwatch_metrics_enabled = true\n      metric_name                = \"AWSManagedRulesBotControlRuleSet\"\n      sampled_requests_enabled   = true\n    }\n  }\n\n  # Additional Log4j protection - SQL injection rules\n  rule {\n    name     = \"AWSManagedRulesSQLiRuleSet\"\n    priority = 4\n\n    override_action {\n      none {}\n    }\n\n    statement {\n      managed_rule_group_statement {\n        name        = \"AWSManagedRulesSQLiRuleSet\"\n        vendor_name = \"AWS\"\n      }\n    }\n\n    visibility_config {\n      cloudwatch_metrics_enabled = true\n      metric_name                = \"AWSManagedRulesSQLiRuleSet\"\n      sampled_requests_enabled   = true\n    }\n  }\n\n  # Anonymous IP list protection\n  rule {\n    name     = \"AWSManagedRulesAnonymousIpList\"\n    priority = 5\n\n    override_action {\n      none {}\n    }\n\n    statement {\n      managed_rule_group_statement {\n        name        = \"AWSManagedRulesAnonymousIpList\"\n        vendor_name = \"AWS\"\n      }\n    }\n\n    visibility_config {\n      cloudwatch_metrics_enabled = true\n      metric_name                = \"AWSManagedRulesAnonymousIpList\"\n      sampled_requests_enabled   = true\n    }\n  }\n\n  visibility_config {\n    cloudwatch_metrics_enabled = true\n    metric_name                = \"meqenet-alb-waf\"\n    sampled_requests_enabled   = true\n  }\n\n  tags = {\n    Name        = \"meqenet-alb-waf\"\n    Environment = \"production\"\n  }\n}\n"}}}}]}]}]}